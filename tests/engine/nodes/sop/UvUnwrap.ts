QUnit.test('UvUnwrap simple', async (assert) => {
	const geo1 = window.geo1;
	const plane = geo1.createNode('plane');
	const box = geo1.createNode('box');
	const uvUnwrap = geo1.createNode('uvUnwrap');
	const merge = geo1.createNode('merge');
	const uvLayout = geo1.createNode('uvLayout');

	uvUnwrap.setInput(0, box);
	merge.setInput(0, plane);
	merge.setInput(1, box);
	uvLayout.setInput(0, merge);

	let container = await uvUnwrap.compute();
	let core_group = container.coreContent()!;
	let geometry0 = core_group.objectsWithGeo()[0].geometry;
	assert.deepEqual(
		(geometry0.getAttribute('uv').array as number[]).join(';'),
		[
			0,
			0,
			0.25,
			0.3333333432674408,
			0.25,
			0,
			0.5,
			0,
			0.5,
			0,
			0.75,
			0.3333333432674408,
			0.75,
			0,
			1,
			0,
			0,
			0.3333333432674408,
			0.25,
			0.6666666865348816,
			0.25,
			0.3333333432674408,
			0.5,
			0.3333333432674408,
			0.5,
			0.3333333432674408,
			0.75,
			0.6666666865348816,
			0.75,
			0.3333333432674408,
			1,
			0.3333333432674408,
			0,
			0.6666666865348816,
			0.25,
			1,
			0.25,
			0.6666666865348816,
			0.5,
			0.6666666865348816,
			0.5,
			0.6666666865348816,
			0.75,
			1,
			0.75,
			0.6666666865348816,
			1,
			0.6666666865348816,
		].join(';')
	);

	container = await uvLayout.compute();
	core_group = container.coreContent()!;
	geometry0 = core_group.objectsWithGeo()[0].geometry;
	assert.deepEqual(
		(geometry0.getAttribute('uv2').array as number[]).join(';'),
		[
			0.002912621246650815,
			0.4985436797142029,
			0.9970873594284058,
			0.4985436797142029,
			0.002912621246650815,
			0.0014563106233254075,
			0.9970873594284058,
			0.0014563106233254075,
		].join(';')
	);
	let geometry1 = core_group.objectsWithGeo()[1].geometry;
	assert.deepEqual(
		(geometry1.getAttribute('uv2').array as number[]).join(';'),
		[
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
			0.002912621246650815,
			0.9985436797142029,
			0.9970873594284058,
			0.9985436797142029,
			0.002912621246650815,
			0.5014563202857971,
			0.9970873594284058,
			0.5014563202857971,
		].join(';')
	);
});
