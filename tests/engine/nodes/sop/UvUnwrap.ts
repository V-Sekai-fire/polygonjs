import {BufferAttribute} from 'three';
import {UvUnwrapMethod} from '../../../../src/engine/operations/sop/UvUnwrap';

QUnit.test('UvUnwrap potpack', async (assert) => {
	const geo1 = window.geo1;
	const plane = geo1.createNode('plane');
	const box = geo1.createNode('box');
	const uvUnwrap = geo1.createNode('uvUnwrap');
	const merge = geo1.createNode('merge');
	const uvLayout = geo1.createNode('uvLayout');

	uvUnwrap.setInput(0, box);
	uvUnwrap.setMethod(UvUnwrapMethod.POTPACK);
	merge.setInput(0, plane);
	merge.setInput(1, box);
	uvLayout.setInput(0, merge);

	let container = await uvUnwrap.compute();
	let core_group = container.coreContent()!;
	let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
	assert.deepEqual(
		((geometry0.getAttribute('uv') as BufferAttribute).array as number[]).join(';'),
		[
			0, 0, 0.25, 0.3333333432674408, 0.25, 0, 0.5, 0, 0.5, 0, 0.75, 0.3333333432674408, 0.75, 0, 1, 0, 0,
			0.3333333432674408, 0.25, 0.6666666865348816, 0.25, 0.3333333432674408, 0.5, 0.3333333432674408, 0.5,
			0.3333333432674408, 0.75, 0.6666666865348816, 0.75, 0.3333333432674408, 1, 0.3333333432674408, 0,
			0.6666666865348816, 0.25, 1, 0.25, 0.6666666865348816, 0.5, 0.6666666865348816, 0.5, 0.6666666865348816,
			0.75, 1, 0.75, 0.6666666865348816, 1, 0.6666666865348816,
		].join(';')
	);

	container = await uvLayout.compute();
	core_group = container.coreContent()!;
	geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
	assert.deepEqual(
		((geometry0.getAttribute('uv2') as BufferAttribute).array as number[]).join(';'),
		[
			0.002912621246650815, 0.4985436797142029, 0.9970873594284058, 0.4985436797142029, 0.002912621246650815,
			0.0014563106233254075, 0.9970873594284058, 0.0014563106233254075,
		].join(';')
	);
	let geometry1 = core_group.threejsObjectsWithGeo()[1].geometry;
	assert.deepEqual(
		((geometry1.getAttribute('uv2') as BufferAttribute).array as number[]).join(';'),
		[
			0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
			0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029,
			0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058,
			0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029,
			0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815,
			0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971,
			0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058,
			0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
			0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
			0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
		].join(';')
	);
});

QUnit.test('UvUnwrap xatlast', async (assert) => {
	const geo1 = window.geo1;
	const plane = geo1.createNode('plane');
	const box = geo1.createNode('box');
	const uvUnwrap = geo1.createNode('uvUnwrap');
	const merge = geo1.createNode('merge');
	const uvLayout = geo1.createNode('uvLayout');

	uvUnwrap.setInput(0, box);
	uvUnwrap.setMethod(UvUnwrapMethod.XATLAS);
	merge.setInput(0, plane);
	merge.setInput(1, box);
	uvLayout.setInput(0, merge);

	let container = await uvUnwrap.compute();
	let core_group = container.coreContent()!;
	let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
	assert.deepEqual(
		((geometry0.getAttribute('uv') as BufferAttribute).array as number[]).join(';'),
		[
			0.9993686676025391, 0.6683394312858582, 0.5410353541374207, 0.6683394312858582, 0.9993686676025391,
			0.9995437860488892, 0.5410353541374207, 0.9995437860488892, 0.4930555522441864, 0.9986313581466675,
			0.4930555522441864, 0.6674270033836365, 0.0347222238779068, 0.6674270033836365, 0.0347222238779068,
			0.9986313581466675, 0.5170454382896423, 0.3362226188182831, 0.5170454382896423, 0.6674270033836365,
			0.9753788113594055, 0.6674270033836365, 0.9753788113594055, 0.3362226188182831, 0.931186854839325,
			0.33166059851646423, 0.931186854839325, 0.0004562043759506196, 0.47285354137420654, 0.33166059851646423,
			0.47285354137420654, 0.0004562043759506196, 0.054924242198467255, 0.6637773513793945, 0.5132575631141663,
			0.6637773513793945, 0.054924242198467255, 0.3325729966163635, 0.5132575631141663, 0.3325729966163635,
			0.45896464586257935, 0.33166059851646423, 0.45896464586257935, 0.0004562043759506196, 0.0006313131307251751,
			0.0004562043759506196, 0.0006313131307251751, 0.33166059851646423,
		].join(';')
	);

	container = await uvLayout.compute();
	core_group = container.coreContent()!;
	geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
	assert.deepEqual(
		((geometry0.getAttribute('uv2') as BufferAttribute).array as number[]).join(';'),
		[
			0.002912621246650815, 0.4985436797142029, 0.9970873594284058, 0.4985436797142029, 0.002912621246650815,
			0.0014563106233254075, 0.9970873594284058, 0.0014563106233254075,
		].join(';')
	);
	let geometry1 = core_group.threejsObjectsWithGeo()[1].geometry;
	assert.deepEqual(
		((geometry1.getAttribute('uv2') as BufferAttribute).array as number[]).join(';'),
		[
			0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
			0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029,
			0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058,
			0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029,
			0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815,
			0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971,
			0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058,
			0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
			0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
			0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
		].join(';')
	);
});
