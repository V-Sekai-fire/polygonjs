import type {QUnit} from '../../../helpers/QUnit';
import {BufferAttribute} from 'three';
import {UvUnwrapMethod} from '../../../../src/engine/operations/sop/UvUnwrap';
export function testenginenodessopUvUnwrap(qUnit: QUnit) {
	qUnit.test('UvUnwrap potpack inputs not merged', async (assert) => {
		const geo1 = window.geo1;
		const plane = geo1.createNode('plane');
		const box = geo1.createNode('box');
		const uvUnwrap = geo1.createNode('uvUnwrap');
		const merge = geo1.createNode('merge');
		const uvLayout = geo1.createNode('uvLayout');

		uvUnwrap.setInput(0, box);
		uvUnwrap.setMethod(UvUnwrapMethod.POTPACK);
		merge.setCompactMode(false);
		merge.setInput(0, plane);
		merge.setInput(1, box);
		uvLayout.setInput(0, merge);

		let container = await uvUnwrap.compute();
		let core_group = container.coreContent()!;
		let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;

		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0, 0, 0.25, 0.3333333432674408, 0.25, 0, 0.5, 0, 0.5, 0, 0.75, 0.3333333432674408, 0.75, 0, 1, 0, 0,
				0.3333333432674408, 0.25, 0.6666666865348816, 0.25, 0.3333333432674408, 0.5, 0.3333333432674408, 0.5,
				0.3333333432674408, 0.75, 0.6666666865348816, 0.75, 0.3333333432674408, 1, 0.3333333432674408, 0,
				0.6666666865348816, 0.25, 1, 0.25, 0.6666666865348816, 0.5, 0.6666666865348816, 0.5, 0.6666666865348816,
				0.75, 1, 0.75, 0.6666666865348816, 1, 0.6666666865348816,
			].join(';'),
			'uvunwrap'
		);

		container = await uvLayout.compute();
		core_group = container.coreContent()!;
		geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.4985436797142029, 0.9970873594284058, 0.4985436797142029, 0.002912621246650815,
				0.0014563106233254075, 0.9970873594284058, 0.0014563106233254075,
			].join(';'),
			'uvLayout 0'
		);
		let geometry1 = core_group.threejsObjectsWithGeo()[1].geometry;

		assert.deepEqual(
			((geometry1.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
				0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029,
				0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058,
				0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029,
				0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815,
				0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971,
				0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058,
				0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
				0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
				0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
			].join(';'),
			'uvLayout 1'
		);
	});

	qUnit.test('UvUnwrap potpack inputs merged', async (assert) => {
		const geo1 = window.geo1;
		const plane = geo1.createNode('plane');
		const box = geo1.createNode('box');
		const uvUnwrap = geo1.createNode('uvUnwrap');
		const merge = geo1.createNode('merge');
		const uvLayout = geo1.createNode('uvLayout');

		uvUnwrap.setInput(0, box);
		uvUnwrap.setMethod(UvUnwrapMethod.POTPACK);
		merge.setCompactMode(true);
		merge.setInput(0, plane);
		merge.setInput(1, box);
		uvLayout.setInput(0, merge);

		let container = await uvUnwrap.compute();
		let core_group = container.coreContent()!;
		let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;

		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0, 0, 0.25, 0.3333333432674408, 0.25, 0, 0.5, 0, 0.5, 0, 0.75, 0.3333333432674408, 0.75, 0, 1, 0, 0,
				0.3333333432674408, 0.25, 0.6666666865348816, 0.25, 0.3333333432674408, 0.5, 0.3333333432674408, 0.5,
				0.3333333432674408, 0.75, 0.6666666865348816, 0.75, 0.3333333432674408, 1, 0.3333333432674408, 0,
				0.6666666865348816, 0.25, 1, 0.25, 0.6666666865348816, 0.5, 0.6666666865348816, 0.5, 0.6666666865348816,
				0.75, 1, 0.75, 0.6666666865348816, 1, 0.6666666865348816,
			].join(';'),
			'uvunwrap'
		);

		container = await uvLayout.compute();
		core_group = container.coreContent()!;
		geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058,
				0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058,
				0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058,
				0.002912621246650815,
			].join(';'),
			'uvLayout 0'
		);
		assert.notOk(core_group.threejsObjectsWithGeo()[1], 'no geo1');
	});

	qUnit.test('UvUnwrap xatlas inputs not merged', async (assert) => {
		const geo1 = window.geo1;
		const plane = geo1.createNode('plane');
		const box = geo1.createNode('box');
		const uvUnwrap = geo1.createNode('uvUnwrap');
		const merge = geo1.createNode('merge');
		const uvLayout = geo1.createNode('uvLayout');

		uvUnwrap.setInput(0, box);
		uvUnwrap.setMethod(UvUnwrapMethod.XATLAS);
		merge.setCompactMode(false);
		merge.setInput(0, plane);
		merge.setInput(1, box);
		uvLayout.setInput(0, merge);

		let container = await uvUnwrap.compute();
		let core_group = container.coreContent()!;
		let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.9997755885124207, 0.5201187133789062, 0.6734739542007446, 0.5201187133789062, 0.9997755885124207,
				0.9996702075004578, 0.6734739542007446, 0.9996702075004578, 0.9872082471847534, 0.5062664747238159,
				0.9872082471847534, 0.02671504020690918, 0.6609066724777222, 0.02671504020690918, 0.6609066724777222,
				0.5062664747238159, 0.34133753180503845, 0.5148416757583618, 0.34133753180503845, 0.9943931102752686,
				0.6676391363143921, 0.9943931102752686, 0.6676391363143921, 0.5148416757583618, 0.33729803562164307,
				0.9732849597930908, 0.010996409691870213, 0.9732849597930908, 0.33729803562164307, 0.4937334954738617,
				0.010996409691870213, 0.4937334954738617, 0.33056554198265076, 0.4877968430519104, 0.6568671464920044,
				0.4877968430519104, 0.33056554198265076, 0.008245382457971573, 0.6568671464920044, 0.008245382457971573,
				0.32652604579925537, 0.47988125681877136, 0.32652604579925537, 0.0003298153169453144,
				0.00022441652254201472, 0.0003298153169453144, 0.00022441652254201472, 0.47988125681877136,
			].join(';'),
			'uvunwrap'
		);

		container = await uvLayout.compute();
		core_group = container.coreContent()!;
		geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.4985436797142029, 0.9970873594284058, 0.4985436797142029, 0.002912621246650815,
				0.0014563106233254075, 0.9970873594284058, 0.0014563106233254075,
			].join(';'),
			'uvlayout 0'
		);
		let geometry1 = core_group.threejsObjectsWithGeo()[1].geometry;
		assert.deepEqual(
			((geometry1.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
				0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029,
				0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058,
				0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029,
				0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971, 0.002912621246650815,
				0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815, 0.5014563202857971,
				0.9970873594284058, 0.5014563202857971, 0.002912621246650815, 0.9985436797142029, 0.9970873594284058,
				0.9985436797142029, 0.002912621246650815, 0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
				0.002912621246650815, 0.9985436797142029, 0.9970873594284058, 0.9985436797142029, 0.002912621246650815,
				0.5014563202857971, 0.9970873594284058, 0.5014563202857971,
			].join(';')
		);
	});

	qUnit.test('UvUnwrap xatlas inputs merged', async (assert) => {
		const geo1 = window.geo1;
		const plane = geo1.createNode('plane');
		const box = geo1.createNode('box');
		const uvUnwrap = geo1.createNode('uvUnwrap');
		const merge = geo1.createNode('merge');
		const uvLayout = geo1.createNode('uvLayout');

		uvUnwrap.setInput(0, box);
		uvUnwrap.setMethod(UvUnwrapMethod.XATLAS);
		merge.setCompactMode(true);
		merge.setInput(0, plane);
		merge.setInput(1, box);
		uvLayout.setInput(0, merge);

		let container = await uvUnwrap.compute();
		let core_group = container.coreContent()!;
		let geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.9997755885124207, 0.5201187133789062, 0.6734739542007446, 0.5201187133789062, 0.9997755885124207,
				0.9996702075004578, 0.6734739542007446, 0.9996702075004578, 0.9872082471847534, 0.5062664747238159,
				0.9872082471847534, 0.02671504020690918, 0.6609066724777222, 0.02671504020690918, 0.6609066724777222,
				0.5062664747238159, 0.34133753180503845, 0.5148416757583618, 0.34133753180503845, 0.9943931102752686,
				0.6676391363143921, 0.9943931102752686, 0.6676391363143921, 0.5148416757583618, 0.33729803562164307,
				0.9732849597930908, 0.010996409691870213, 0.9732849597930908, 0.33729803562164307, 0.4937334954738617,
				0.010996409691870213, 0.4937334954738617, 0.33056554198265076, 0.4877968430519104, 0.6568671464920044,
				0.4877968430519104, 0.33056554198265076, 0.008245382457971573, 0.6568671464920044, 0.008245382457971573,
				0.32652604579925537, 0.47988125681877136, 0.32652604579925537, 0.0003298153169453144,
				0.00022441652254201472, 0.0003298153169453144, 0.00022441652254201472, 0.47988125681877136,
			].join(';'),
			'uvunwrap'
		);

		container = await uvLayout.compute();
		core_group = container.coreContent()!;
		geometry0 = core_group.threejsObjectsWithGeo()[0].geometry;
		assert.deepEqual(
			((geometry0.getAttribute('uvLightMap') as BufferAttribute).array as number[]).join(';'),
			[
				0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058,
				0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058,
				0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815,
				0.002912621246650815, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.9970873594284058, 0.9970873594284058, 0.002912621246650815, 0.002912621246650815,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058, 0.9970873594284058,
				0.9970873594284058, 0.002912621246650815, 0.002912621246650815, 0.9970873594284058,
				0.002912621246650815,
			].join(';'),
			'uvlayout 0'
		);
		assert.notOk(core_group.threejsObjectsWithGeo()[1], 'no geometry1');
	});
}
