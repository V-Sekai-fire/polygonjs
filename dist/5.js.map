{"version":3,"sources":["webpack://POLY/./node_modules/three/src/textures/CompressedTexture.js","webpack://POLY/./src/modules/three/examples/jsm/loaders/BasisTextureLoader.js"],"names":["CompressedTexture","mipmaps","width","height","format","type","mapping","wrapS","wrapT","magFilter","minFilter","anisotropy","encoding","Texture","call","this","image","flipY","generateMipmaps","prototype","Object","create","constructor","isCompressedTexture","BasisTextureLoader","manager","Loader","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","taskCache","WeakMap","assign","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","config","extensions","has","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","Error","cTFETC1","load","url","onLoad","onProgress","onError","loader","FileLoader","setResponseType","setWithCredentials","withCredentials","buffer","get","promise","then","catch","_createTexture","worker","taskID","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","texture","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","length","needsUpdate","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","data","console","error","push","sort","a","b","dispose","i","terminate","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","wasmBinary","BasisModule","onRuntimeInitialized","BASIS","BasisFile","initializeBasis","hasAlpha","basisFile","Uint8Array","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","delete","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","buffers","self"],"mappings":"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","file":"5.js","sourcesContent":["import { Texture } from './Texture.js';\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n\nexport { CompressedTexture };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_BPTC_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tbptcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.taskCache = new WeakMap();\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.bptcSupported = renderer.extensions.has( 'EXT_texture_compression_bptc' );\n\t\tconfig.etcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.bptcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( BasisTextureLoader.taskCache.has( buffer ) ) {\n\n\t\t\t\tvar cachedTask = BasisTextureLoader.taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( buffer, url )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param\t{ArrayBuffer} buffer\n\t * @param\t{string} url\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer, url ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\ttexturePending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tBasisTextureLoader.taskCache.set( buffer, {\n\n\t\t\turl: url,\n\t\t\tpromise: texturePending\n\n\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:\tInvalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n"],"sourceRoot":""}