{"version":3,"sources":["webpack://POLY/./node_modules/three/src/loaders/DataTextureLoader.js","webpack://POLY/./src/modules/three/examples/jsm/libs/inflate.module.min.js","webpack://POLY/./src/modules/three/examples/jsm/loaders/EXRLoader.js"],"names":["DataTextureLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","texture","loader","setResponseType","setRequestHeader","requestHeader","setPath","path","setWithCredentials","withCredentials","buffer","texData","parse","undefined","image","data","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","format","type","mipmaps","mipmapCount","needsUpdate","mod","l","aa","r","c","d","e","a","split","b","execScript","length","shift","t","Uint8Array","Uint16Array","Uint32Array","DataView","v","f","g","h","k","m","n","p","s","x","Number","POSITIVE_INFINITY","Array","w","input","i","y","index","bufferSize","bufferType","resize","A","z","j","Error","B","C","set","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","slice","P","fa","G","H","I","J","K","L","da","ea","N","O","R","ga","Q","W","verify","ha","method","o","push","charCodeAt","Y","Z","$","ia","X","ADAPTIVE","BLOCK","keys","Inflate","Zlib","EXRLoader","USHORT_RANGE","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","logBase","Math","pow","tmpDataView","ArrayBuffer","frexp","value","setFloat64","bits","getUint32","exponent","mantissa","steps","min","ceil","abs","result","floor","ldexp","getBitsReturn","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","hufUnpackEncTable","inDataView","ni","im","iM","hcode","zerun","nc","hufCanonicalCodeTable","hufLength","code","hufCode","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","UInt16","Int16","ref","wdec14Return","wdec14","ls","hs","ai","as","bs","wdec16","bb","wav2Decode","nx","ox","ny","oy","mx","p2","w14","i00","i01","i10","i11","py","ey","oy1","oy2","ox1","ox2","px","ex","p01","p11","p10","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","hdec","len","lit","hufClearDecTable","hdecod","pl","plOffset","hufBuildDecTable","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","hufDecode","predictor","source","interleaveScalar","out","t1","t2","stop","decodeRunLength","size","byteLength","reader","getInt8","count","getUint8","unRleAC","currAcComp","acBuffer","halfZigBlock","acValue","dctComp","unZigZag","src","dst","decodeFloat16","dctInverse","cos","alpha","beta","theta","gamma","row","rowPtr","column","csc709Inverse","cb","cr","convertToHalf","idx","toHalfFloat","toLinear","float","sign","uncompressZIP","info","compressed","array","offset","console","error","inflate","rawBuffer","decompress","tmpBuffer","uncompressDWA","viewer","lines","EXRHeader","channels","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","compression","channelRules","ruleSize","parseUint16","name","parseNullTerminatedString","parseUint8","Int8Array","channelData","cd","channel","decoded","pixelType","pLinear","cscSet","rule","zlibInfo","dcBuffer","rleBuffer","outBufferEnd","rowOffsets","chan","rowPtrs","dataView","numFullBlocksX","numBlocksX","numBlocksY","leftoverX","leftoverY","currDcComp","dctData","rowBlock","comp","Float32Array","blocky","maxY","maxX","blockx","fill","setUint16","halfRow","getUint16","setFloat32","lossyDctDecode","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseUlong","uLong","parseInt32","Int32","getInt32","Uint32","Uint8","int","getBigInt64","parseFloat32","getFloat32","binary","fraction","NaN","Infinity","Uint16","parseValue","parseFixedLengthString","startOffset","xSampling","ySampling","parseChlist","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseChromaticities","parseCompression","xMin","yMin","xMax","yMax","parseBox2i","parseLineOrder","parseV2f","parseV3f","parseRational","parseTimecode","bufferDataView","keepReading","attributeName","attributeType","attributeValue","warn","uncompress","scanlineBlockSize","size_t","getValue","dataWindowHeight","dataWindow","tmpBufSize","bitmap","pizChannelData","minNonZero","maxNonZero","lut","maxValue","reverseLutFromBitmap","start","nData","applyLut","tmpOffset","cp","end","sz","tmpBufferEnd","writePtr","ptr","pixel","numBlocks","byteArray","line","channelOffsets","compressionInfo","scanlineBlockIdx","line_y","true_y","channelID","cOff","val","RGBEArray","red","green","blue","res","header","setDataType","encoding","generateMipmaps","flipY"],"mappings":"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EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,IAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,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","file":"0.js","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n\nexport { DataTextureLoader };\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Inflate=mod.Zlib.Inflate;\nexport { Inflate }\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {DataUtils} from 'three/src/extras/DataUtils';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBAFormat} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\nimport { Inflate } from \"../libs/inflate.module.min.js\";\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\nvar EXRLoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = FloatType;\n\n};\n\nEXRLoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: EXRLoader,\n\n\tparse: function ( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst NBITS = 16;\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tvar tmpDataView = new DataView( new ArrayBuffer( 8 ) );\n\n\t\tfunction frexp( value ) {\n\n\t\t\tif ( value === 0 ) return [ value, 0 ];\n\n\t\t\ttmpDataView.setFloat64( 0, value );\n\n\t\t\tvar bits = ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF;\n\t\t\tif ( bits === 0 ) { // denormal\n\n\t\t\t\ttmpDataView.setFloat64( 0, value * Math.pow( 2, 64 ) ); // exp + 64\n\t\t\t\tbits = ( ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF ) - 64;\n\n\t\t\t}\n\n\t\t\tvar exponent = bits - 1022;\n\t\t\tvar mantissa = ldexp( value, - exponent );\n\n\t\t\treturn [ mantissa, exponent ];\n\n\t\t}\n\n\t\tfunction ldexp( mantissa, exponent ) {\n\n\t\t\tvar steps = Math.min( 3, Math.ceil( Math.abs( exponent ) / 1023 ) );\n\t\t\tvar result = mantissa;\n\n\t\t\tfor ( var i = 0; i < steps; i ++ )\n\t\t\t\tresult *= Math.pow( 2, Math.floor( ( exponent + i ) / steps ) );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tvar k = 0;\n\n\t\t\tfor ( var i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( var i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( var i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tvar c = 0;\n\n\t\t\tfor ( var i = 58; i > 0; -- i ) {\n\n\t\t\t\tvar nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tvar l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tvar p = inOffset;\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tvar l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tvar zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tvar zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tvar c = hufCode( hcode[ im ] );\n\t\t\t\tvar l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tvar pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tvar p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( var i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tvar plOffset = 0;\n\n\t\t\t\t\tfor ( var i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tvar pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tvar cs = ( c >> lc );\n\t\t\t\tvar cs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tvar s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tvar ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tvar ls = Int16( l );\n\t\t\tvar hs = Int16( h );\n\n\t\t\tvar hi = hs;\n\t\t\tvar ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tvar as = ai;\n\t\t\tvar bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wdec16( l, h ) {\n\n\t\t\tvar m = UInt16( l );\n\t\t\tvar d = UInt16( h );\n\n\t\t\tvar bb = ( m - ( d >> 1 ) ) & MOD_MASK;\n\t\t\tvar aa = ( d + bb - A_OFFSET ) & MOD_MASK;\n\n\t\t\twdec14Return.a = aa;\n\t\t\twdec14Return.b = bb;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\n\n\t\t\tvar w14 = mx < ( 1 << 14 );\n\t\t\tvar n = ( nx > ny ) ? ny : nx;\n\t\t\tvar p = 1;\n\t\t\tvar p2;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tvar py = 0;\n\t\t\t\tvar ey = py + oy * ( ny - p2 );\n\t\t\t\tvar oy1 = oy * p;\n\t\t\t\tvar oy2 = oy * p2;\n\t\t\t\tvar ox1 = ox * p;\n\t\t\t\tvar ox2 = ox * p2;\n\t\t\t\tvar i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\t\t\t\t\t\tvar p10 = px + oy1;\n\t\t\t\t\t\tvar p11 = p10 + ox1;\n\n\t\t\t\t\t\tif ( w14 ) {\n\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tvar p10 = px + oy1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\t\t\tvar outBufferEndOffset = no;\n\t\t\tvar inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tvar index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tvar pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tvar l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tvar pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tvar outOffset = { value: 0 };\n\t\t\tvar initialInOffset = inOffset.value;\n\n\t\t\tvar im = parseUint32( inDataView, inOffset );\n\t\t\tvar iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tvar nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow 'Something wrong with HUF_ENCSIZE';\n\n\t\t\t}\n\n\t\t\tvar freq = new Array( HUF_ENCSIZE );\n\t\t\tvar hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tvar ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow 'Something wrong with hufUncompress';\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( var i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( var t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tvar d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tvar t1 = 0;\n\t\t\tvar t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tvar s = 0;\n\t\t\tvar stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tvar size = source.byteLength;\n\t\t\tvar out = new Array();\n\t\t\tvar p = 0;\n\n\t\t\tvar reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tvar l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tvar count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tvar value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( var i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\tvar width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tvar height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tvar numComp = 3;\n\n\t\t\tvar numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tvar numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tvar numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tvar leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tvar leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tvar currAcComp = { value: 0 };\n\t\t\tvar currDcComp = new Array( numComp );\n\t\t\tvar dctData = new Array( numComp );\n\t\t\tvar halfZigBlock = new Array( numComp );\n\t\t\tvar rowBlock = new Array( numComp );\n\t\t\tvar rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tvar maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tvar maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tvar halfRow = new Uint16Array( width );\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( var comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tvar type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( var y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tvar acValue;\n\t\t\tvar dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tvar alpha = new Array( 4 );\n\t\t\tvar beta = new Array( 4 );\n\t\t\tvar theta = new Array( 4 );\n\t\t\tvar gamma = new Array( 4 );\n\n\t\t\tfor ( var row = 0; row < 8; ++ row ) {\n\n\t\t\t\tvar rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( var column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tvar y = data[ 0 ][ i ];\n\t\t\t\tvar cb = data[ 1 ][ i ];\n\t\t\t\tvar cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = DataUtils.toHalfFloat( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tvar compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tvar rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tvar compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof Inflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t}\n\n\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\n\t\t\tvar rawBuffer = new Uint8Array( inflate.decompress().buffer );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\n\t\t\tvar tmpBufSize = info.width * scanlineBlockSize * ( EXRHeader.channels.length * info.type );\n\t\t\tvar outBuffer = new Uint16Array( tmpBufSize );\n\t\t\tvar bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar pizChannelData = new Array( info.channels );\n\t\t\tfor ( var i = 0; i < info.channels; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.width;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\t\t\tvar minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tvar maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( var i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tvar lut = new Uint16Array( USHORT_RANGE );\n\t\t\tvar maxValue = reverseLutFromBitmap( bitmap, lut );\n\n\t\t\tvar length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( var j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size,\n\t\t\t\t\t\tmaxValue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tvar tmpOffset = 0;\n\t\t\tvar tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( var y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( var c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tvar cd = pizChannelData[ c ];\n\n\t\t\t\t\tvar n = cd.nx * cd.size;\n\t\t\t\t\tvar cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPXR( info ) {\n\n\t\t\tvar compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof Inflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t}\n\n\t\t\tconst inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\tconst rawBuffer = new Uint8Array( inflate.decompress().buffer );\n\n\t\t\tconst sz = info.lines * info.channels * info.width;\n\t\t\tconst tmpBuffer = ( info.type == 1 ) ? new Uint16Array( sz ) : new Uint32Array( sz );\n\n\t\t\tlet tmpBufferEnd = 0;\n\t\t\tlet writePtr = 0;\n\t\t\tconst ptr = new Array( 4 );\n\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tlet pixel = 0;\n\n\t\t\t\t\tswitch ( info.type ) {\n\n\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\t\t\tvar outBuffer = new Uint8Array( info.width * info.lines * ( EXRHeader.channels.length * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tvar dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n\n\t\t\t// Read channel ruleset information\n\t\t\tvar channelRules = new Array();\n\t\t\tvar ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tvar value = parseUint8( inDataView, inOffset );\n\t\t\t\tvar compression = ( value >> 2 ) & 3;\n\t\t\t\tvar csc = ( value >> 4 ) - 1;\n\t\t\t\tvar index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tvar type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tvar channels = EXRHeader.channels;\n\t\t\tvar channelData = new Array( info.channels );\n\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ] = {};\n\t\t\t\tvar channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.width;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tvar cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( var offset = 0; offset < info.channels; ++ offset ) {\n\n\t\t\t\tvar cd = channelData[ offset ];\n\n\t\t\t\tfor ( var i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tvar rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( inflate.decompress().buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tvar zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tvar dcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\tvar rleBuffer = decodeRunLength( inflate.decompress().buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar rowOffsets = new Array( channelData.length );\n\t\t\tfor ( var i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( var chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( var i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tvar row = 0;\n\t\t\t\t\t\tvar rleOffset = 0;\n\n\t\t\t\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tvar rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( var x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( var byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow 'EXRLoader.parse: unsupported channel compression';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tvar uintBuffer = new Uint8Array( buffer );\n\t\t\tvar endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseUlong( dataView, offset ) {\n\n\t\t\tvar uLong = dataView.getUint32( 0, true );\n\n\t\t\toffset.value = offset.value + ULONG_SIZE;\n\n\t\t\treturn uLong;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tvar x = parseInt32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tvar x = parseUint32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tvar Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tvar Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tvar Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tvar Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseInt64( dataView, offset ) {\n\n\t\t\tvar int = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn int;\n\n\t\t}\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tvar float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn DataUtils.toHalfFloat( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tvar exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tvar Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tvar startOffset = offset.value;\n\t\t\tvar channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar pixelType = parseInt32( dataView, offset );\n\t\t\t\tvar pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tvar xSampling = parseInt32( dataView, offset );\n\t\t\t\tvar ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tvar redX = parseFloat32( dataView, offset );\n\t\t\tvar redY = parseFloat32( dataView, offset );\n\t\t\tvar greenX = parseFloat32( dataView, offset );\n\t\t\tvar greenY = parseFloat32( dataView, offset );\n\t\t\tvar blueX = parseFloat32( dataView, offset );\n\t\t\tvar blueY = parseFloat32( dataView, offset );\n\t\t\tvar whiteX = parseFloat32( dataView, offset );\n\t\t\tvar whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tvar compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tvar compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tvar xMin = parseUint32( dataView, offset );\n\t\t\tvar yMin = parseUint32( dataView, offset );\n\t\t\tvar xMax = parseUint32( dataView, offset );\n\t\t\tvar yMax = parseUint32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tvar lineOrders = [\n\t\t\t\t'INCREASING_Y'\n\t\t\t];\n\n\t\t\tvar lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tvar x = parseFloat32( dataView, offset );\n\t\t\tvar y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseV3f( dataView, offset ) {\n\n\t\t\tvar x = parseFloat32( dataView, offset );\n\t\t\tvar y = parseFloat32( dataView, offset );\n\t\t\tvar z = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y, z ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'v3f' ) {\n\n\t\t\t\treturn parseV3f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else if ( type === 'preview' ) {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn 'skipped';\n\n\t\t\t} else {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bufferDataView = new DataView( buffer );\n\t\tvar uInt8Array = new Uint8Array( buffer );\n\n\t\tvar EXRHeader = {};\n\n\t\tbufferDataView.getUint32( 0, true ); // magic\n\t\tbufferDataView.getUint8( 4, true ); // versionByteZero\n\t\tbufferDataView.getUint8( 5, true ); // fullMask\n\n\t\t// start of header\n\n\t\tvar offset = { value: 8 }; // start at 8, after magic stuff\n\n\t\tvar keepReading = true;\n\n\t\twhile ( keepReading ) {\n\n\t\t\tvar attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\tif ( attributeName == 0 ) {\n\n\t\t\t\tkeepReading = false;\n\n\t\t\t} else {\n\n\t\t\t\tvar attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar attributeSize = parseUint32( bufferDataView, offset );\n\t\t\t\tvar attributeValue = parseValue( bufferDataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\tif ( attributeValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( `EXRLoader.parse: skipped unknown header attribute type \\'${ attributeType }\\'.` );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// offsets\n\t\tvar dataWindowHeight = EXRHeader.dataWindow.yMax + 1;\n\n\t\tvar uncompress;\n\t\tvar scanlineBlockSize;\n\n\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\tcase 'NO_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRAW;\n\t\t\t\tbreak;\n\n\t\t\tcase 'RLE_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIPS_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIP_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 16;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PIZ_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressPIZ;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PXR24_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 16;\n\t\t\t\tuncompress = uncompressPXR;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAA_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAB_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 256;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n\n\t\t}\n\n\t\tvar size_t;\n\t\tvar getValue;\n\n\t\t// mixed pixelType not supported\n\t\tvar pixelType = EXRHeader.channels[ 0 ].pixelType;\n\n\t\tif ( pixelType === 1 ) { // half\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\tgetValue = parseFloat16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\tgetValue = parseUint16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( pixelType === 2 ) { // float\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\tgetValue = parseFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\tgetValue = decodeFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow 'EXRLoader.parse: unsupported pixelType ' + pixelType + ' for ' + EXRHeader.compression + '.';\n\n\t\t}\n\n\t\tvar numBlocks = dataWindowHeight / scanlineBlockSize;\n\n\t\tfor ( var i = 0; i < numBlocks; i ++ ) {\n\n\t\t\tparseUlong( bufferDataView, offset ); // scanlineOffset\n\n\t\t}\n\n\t\t// we should be passed the scanline offset table, start reading pixel data\n\n\t\tvar width = EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1;\n\t\tvar height = EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1;\n\t\t// Firefox only supports RGBA (half) float textures\n\t\t// var numChannels = EXRHeader.channels.length;\n\t\tvar numChannels = 4;\n\t\tvar size = width * height * numChannels;\n\n\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\tswitch ( this.type ) {\n\n\t\t\tcase UnsignedByteType:\n\t\t\tcase FloatType:\n\n\t\t\t\tvar byteArray = new Float32Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 1, 0, size );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tvar byteArray = new Uint16Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar channelOffsets = {\n\t\t\tR: 0,\n\t\t\tG: 1,\n\t\t\tB: 2,\n\t\t\tA: 3\n\t\t};\n\n\t\tvar compressionInfo = {\n\n\t\t\tsize: 0,\n\t\t\twidth: width,\n\t\t\tlines: scanlineBlockSize,\n\n\t\t\toffset: offset,\n\t\t\tarray: uInt8Array,\n\t\t\tviewer: bufferDataView,\n\n\t\t\ttype: pixelType,\n\t\t\tchannels: EXRHeader.channels.length,\n\n\t\t};\n\n\t\tvar line;\n\t\tvar size;\n\t\tvar viewer;\n\t\tvar tmpOffset = { value: 0 };\n\n\t\tfor ( var scanlineBlockIdx = 0; scanlineBlockIdx < height / scanlineBlockSize; scanlineBlockIdx ++ ) {\n\n\t\t\tline = parseUint32( bufferDataView, offset ); // line_no\n\t\t\tsize = parseUint32( bufferDataView, offset ); // data_len\n\n\t\t\tcompressionInfo.lines = ( line + scanlineBlockSize > height ) ? height - line : scanlineBlockSize;\n\t\t\tcompressionInfo.offset = offset;\n\t\t\tcompressionInfo.size = size;\n\n\t\t\tviewer = uncompress( compressionInfo );\n\n\t\t\toffset.value += size;\n\n\t\t\tfor ( var line_y = 0; line_y < scanlineBlockSize; line_y ++ ) {\n\n\t\t\t\tvar true_y = line_y + ( scanlineBlockIdx * scanlineBlockSize );\n\n\t\t\t\tif ( true_y >= height ) break;\n\n\t\t\t\tfor ( var channelID = 0; channelID < EXRHeader.channels.length; channelID ++ ) {\n\n\t\t\t\t\tvar cOff = channelOffsets[ EXRHeader.channels[ channelID ].name ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\t\tvar idx = ( line_y * ( EXRHeader.channels.length * width ) ) + ( channelID * width ) + x;\n\t\t\t\t\t\ttmpOffset.value = idx * size_t;\n\n\t\t\t\t\t\tvar val = getValue( viewer, tmpOffset );\n\n\t\t\t\t\t\tbyteArray[ ( ( ( height - 1 - true_y ) * ( width * numChannels ) ) + ( x * numChannels ) ) + cOff ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.type === UnsignedByteType ) {\n\n\t\t\tlet v, i;\n\t\t\tconst size = byteArray.length;\n\t\t\tconst RGBEArray = new Uint8Array( size );\n\n\t\t\tfor ( let h = 0; h < height; ++ h ) {\n\n\t\t\t\tfor ( let w = 0; w < width; ++ w ) {\n\n\t\t\t\t\ti = h * width * 4 + w * 4;\n\n\t\t\t\t\tconst red = byteArray[ i ];\n\t\t\t\t\tconst green = byteArray[ i + 1 ];\n\t\t\t\t\tconst blue = byteArray[ i + 2 ];\n\n\t\t\t\t\tv = ( red > green ) ? red : green;\n\t\t\t\t\tv = ( blue > v ) ? blue : v;\n\n\t\t\t\t\tif ( v < 1e-32 ) {\n\n\t\t\t\t\t\tRGBEArray[ i ] = RGBEArray[ i + 1 ] = RGBEArray[ i + 2 ] = RGBEArray[ i + 3 ] = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst res = frexp( v );\n\t\t\t\t\t\tv = res[ 0 ] * 256 / v;\n\n\t\t\t\t\t\tRGBEArray[ i ] = red * v;\n\t\t\t\t\t\tRGBEArray[ i + 1 ] = green * v;\n\t\t\t\t\t\tRGBEArray[ i + 2 ] = blue * v;\n\t\t\t\t\t\tRGBEArray[ i + 3 ] = res[ 1 ] + 128;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbyteArray = RGBEArray;\n\n\t\t}\n\n\t\tconst format = ( this.type === UnsignedByteType ) ? RGBEFormat : ( numChannels === 4 ) ? RGBAFormat : RGBFormat;\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: byteArray,\n\t\t\tformat: format,\n\t\t\ttype: this.type\n\t\t};\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = false;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { EXRLoader };\n"],"sourceRoot":""}