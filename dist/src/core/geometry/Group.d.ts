import { Vector3 } from 'three/src/math/Vector3';
import { Object3D } from 'three/src/core/Object3D';
import { Mesh } from 'three/src/objects/Mesh';
import { Group } from 'three/src/objects/Group';
import { BufferGeometry } from 'three/src/core/BufferGeometry';
import { Box3 } from 'three/src/math/Box3';
import { CoreObject } from './Object';
import { CoreGeometry } from './Geometry';
import { AttribClass, AttribSize, ObjectData } from './Constant';
export declare type GroupString = string;
export interface Object3DWithGeometry extends Object3D {
    geometry: BufferGeometry;
}
export declare class CoreGroup {
    private _timestamp;
    private _objects;
    private _objects_with_geo;
    private _core_objects;
    private _core_geometries;
    private _bounding_box;
    constructor();
    timestamp(): number | undefined;
    touch(): void;
    reset(): void;
    clone(): CoreGroup;
    set_objects(objects: Object3D[]): void;
    objects(): Object3D[];
    objects_with_geo(): Object3DWithGeometry[];
    core_objects(): CoreObject[];
    private _create_core_objects;
    objects_data(): ObjectData[];
    private _object_data;
    geometries(): BufferGeometry[];
    core_geometries(): CoreGeometry[];
    private create_core_geometries;
    __geometry_from_object(list: BufferGeometry[], object: Mesh): number | undefined;
    static geometry_from_object(object: Object3D): BufferGeometry | null;
    faces(): import("./Face").CoreFace[];
    points(): import("./Point").CorePoint[];
    points_count(): number;
    total_points_count(): number;
    points_from_group(group: GroupString): import("./Point").CorePoint[];
    static from_objects(objects: Object3D[]): CoreGroup;
    objects_from_group(group_name: string): Object3D[];
    core_objects_from_group(group_name: string): CoreObject[];
    bounding_box(): Box3;
    center(): Vector3;
    size(): Vector3;
    private _compute_bounding_box;
    compute_vertex_normals(): void;
    has_attrib(name: string): boolean;
    attrib_type(name: string): import("./Constant").AttribType | null;
    object_attrib_type(name: string): import("./Constant").AttribType | null;
    rename_attrib(old_name: string, new_name: string, attrib_class: AttribClass): void;
    attrib_names(): string[];
    object_attrib_names(): string[];
    attrib_names_matching_mask(masks_string: GroupString): string[];
    attrib_sizes(): Dictionary<AttribSize>;
    object_attrib_sizes(): Dictionary<AttribSize>;
    attrib_size(attrib_name: string): number;
    add_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue): void;
    add_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue): void;
    static clone(src_group: Group): Group;
}
