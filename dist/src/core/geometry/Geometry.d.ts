import { Vector3 } from 'three/src/math/Vector3';
import { BufferGeometry } from 'three/src/core/BufferGeometry';
import { Box3 } from 'three/src/math/Box3';
import { CorePoint } from './Point';
import { CoreFace } from './Face';
import { ObjectType, AttribType, AttribSize } from './Constant';
import { CoreAttributeData } from './AttributeData';
export declare class CoreGeometry {
    private _geometry;
    _bounding_box: Box3 | undefined;
    private _points;
    constructor(_geometry: BufferGeometry);
    geometry(): BufferGeometry;
    uuid(): string;
    bounding_box(): Box3 | undefined;
    _create_bounding_box(): Box3 | undefined;
    mark_as_instance(): void;
    static marked_as_instance(geometry: BufferGeometry): boolean;
    marked_as_instance(): boolean;
    position_attrib_name(): string;
    compute_vertex_normals(): void;
    user_data_attribs(): any;
    indexed_attribute_names(): string[];
    user_data_attrib(name: string): any;
    is_attrib_indexed(name: string): boolean;
    has_attrib(name: string): boolean;
    attrib_type(name: string): AttribType;
    attrib_names(): string[];
    attrib_sizes(): Dictionary<AttribSize>;
    attrib_size(name: string): number;
    set_indexed_attribute_values(name: string, values: string[]): void;
    set_indexed_attribute(name: string, values: string[], indices: number[]): void;
    add_numeric_attrib(name: string, size?: number, default_value?: NumericAttribValue): void;
    init_position_attribute(points_count: number, default_value?: Vector3): BufferGeometry;
    add_attribute(name: string, attrib_data: CoreAttributeData): void;
    rename_attribute(old_name: string, new_name: string): BufferGeometry;
    delete_attribute(name: string): BufferGeometry;
    clone(): BufferGeometry;
    static clone(src_geometry: BufferGeometry): BufferGeometry;
    points_count(): number;
    static points_count(geometry: BufferGeometry): number;
    points(): CorePoint[];
    reset_points(): void;
    points_from_geometry(): CorePoint[];
    private static _mesh_builder;
    private static _points_builder;
    private static _lines_segment_builder;
    static geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry | null;
    static merge_geometries(geometries: BufferGeometry[]): BufferGeometry | undefined;
    segments(): number[][];
    faces(): CoreFace[];
    faces_from_geometry(): CoreFace[];
}
