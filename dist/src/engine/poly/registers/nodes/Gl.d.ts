import { FloatToIntGlNode } from '../../../nodes/gl/_ConversionMisc';
import { FloatToVec2GlNode, FloatToVec3GlNode, FloatToVec4GlNode } from '../../../nodes/gl/_ConversionToVec';
import { Vec2ToFloatGlNode, Vec3ToFloatGlNode, Vec4ToFloatGlNode, Vec4ToVec3GlNode, Vec3ToVec4GlNode, Vec3ToVec2GlNode, Vec2ToVec3GlNode } from '../../../nodes/gl/_ConversionVecTo';
import { AbsGlNode, AcosGlNode, AsinGlNode, AtanGlNode, CeilGlNode, CosGlNode, DegreesGlNode, ExpGlNode, Exp2GlNode, FloorGlNode, FractGlNode, InverseSqrtGlNode, LogGlNode, Log2GlNode, NormalizeGlNode, RadiansGlNode, SignGlNode, SinGlNode, SqrtGlNode, TanGlNode } from '../../../nodes/gl/_Math_Arg1';
import { DistanceGlNode, DotGlNode, MaxGlNode, MinGlNode, ModGlNode, PowGlNode, ReflectGlNode, StepGlNode } from '../../../nodes/gl/_Math_Arg2';
import { ClampGlNode, FaceforwardGlNode, SmoothStepGlNode } from '../../../nodes/gl/_Math_Arg3';
import { AddGlNode, DivideGlNode, MultGlNode, SubstractGlNode } from '../../../nodes/gl/_Math_Arg2Operation';
import { AndGlNode, OrGlNode } from '../../../nodes/gl/_Math_Arg2Boolean';
import { AccelerationGlNode } from '../../../nodes/gl/Acceleration';
import { AlignGlNode } from '../../../nodes/gl/Align';
import { AttributeGlNode } from '../../../nodes/gl/Attribute';
import { ColorCorrectGlNode } from '../../../nodes/gl/ColorCorrect';
import { CompareGlNode } from '../../../nodes/gl/Compare';
import { ComplementGlNode } from '../../../nodes/gl/Complement';
import { ConstantGlNode } from '../../../nodes/gl/Constant';
import { CrossGlNode } from '../../../nodes/gl/Cross';
import { CycleGlNode } from '../../../nodes/gl/Cycle';
import { DiskGlNode } from '../../../nodes/gl/Disk';
import { EasingGlNode } from '../../../nodes/gl/Easing';
import { FitGlNode, FitTo01GlNode, FitFrom01GlNode, FitFrom01ToVarianceGlNode } from '../../../nodes/gl/Fit';
import { FogGlNode } from '../../../nodes/gl/Fog';
import { ForLoopGlNode } from '../../../nodes/gl/ForLoop';
import { GlobalsGlNode } from '../../../nodes/gl/Globals';
import { HsluvToRgbGlNode } from '../../../nodes/gl/HsluvToRgb';
import { HsvToRgbGlNode } from '../../../nodes/gl/HsvToRgb';
import { IfThenGlNode } from '../../../nodes/gl/IfThen';
import { ImpostorUvGlNode } from '../../../nodes/gl/ImpostorUv';
import { InstanceTransformGlNode } from '../../../nodes/gl/InstanceTransform';
import { LengthGlNode } from '../../../nodes/gl/Length';
import { LuminanceGlNode } from '../../../nodes/gl/Luminance';
import { MaxLengthGlNode } from '../../../nodes/gl/MaxLength';
import { MixGlNode } from '../../../nodes/gl/Mix';
import { ModelViewMatrixMultGlNode } from '../../../nodes/gl/ModelViewMatrixMult';
import { MultAddGlNode } from '../../../nodes/gl/MultAdd';
import { NegateGlNode } from '../../../nodes/gl/Negate';
import { NoiseGlNode } from '../../../nodes/gl/Noise';
import { NullGlNode } from '../../../nodes/gl/Null';
import { OutputGlNode } from '../../../nodes/gl/Output';
import { ParamGlNode } from '../../../nodes/gl/Param';
import { RefractGlNode } from '../../../nodes/gl/Refract';
import { QuatMultGlNode } from '../../../nodes/gl/QuatMult';
import { QuatFromAxisAngleGlNode } from '../../../nodes/gl/QuatFromAxisAngle';
import { QuatToAngleGlNode } from '../../../nodes/gl/QuatToAngle';
import { QuatToAxisGlNode } from '../../../nodes/gl/QuatToAxis';
import { RampGlNode } from '../../../nodes/gl/Ramp';
import { RandomGlNode } from '../../../nodes/gl/Random';
import { RgbToHsvGlNode } from '../../../nodes/gl/RgbToHsv';
import { RotateGlNode } from '../../../nodes/gl/Rotate';
import { RoundGlNode } from '../../../nodes/gl/Round';
import { SphereGlNode } from '../../../nodes/gl/Sphere';
import { SubnetGlNode } from '../../../nodes/gl/Subnet';
import { SubnetInputGlNode } from '../../../nodes/gl/SubnetInput';
import { SubnetOutputGlNode } from '../../../nodes/gl/SubnetOutput';
import { SwitchGlNode } from '../../../nodes/gl/Switch';
import { TextureGlNode } from '../../../nodes/gl/Texture';
import { TwoWaySwitchGlNode } from '../../../nodes/gl/TwoWaySwitch';
import { VaryingWriteGlNode } from '../../../nodes/gl/VaryingWrite';
import { VaryingReadGlNode } from '../../../nodes/gl/VaryingRead';
import { VectorAlignGlNode } from '../../../nodes/gl/VectorAlign';
import { VectorAngleGlNode } from '../../../nodes/gl/VectorAngle';
export interface GlNodeChildrenMap {
    abs: AbsGlNode;
    acceleration: AccelerationGlNode;
    acos: AcosGlNode;
    add: AddGlNode;
    align: AlignGlNode;
    and: AndGlNode;
    asin: AsinGlNode;
    atan: AtanGlNode;
    attribute: AttributeGlNode;
    ceil: CeilGlNode;
    clamp: ClampGlNode;
    color_correct: ColorCorrectGlNode;
    compare: CompareGlNode;
    complement: ComplementGlNode;
    constant: ConstantGlNode;
    cos: CosGlNode;
    cross: CrossGlNode;
    cycle: CycleGlNode;
    degrees: DegreesGlNode;
    disk: DiskGlNode;
    distance: DistanceGlNode;
    divide: DivideGlNode;
    dot: DotGlNode;
    easing: EasingGlNode;
    exp: ExpGlNode;
    exp2: Exp2GlNode;
    face_forward: FaceforwardGlNode;
    fit: FitGlNode;
    fit_to_01: FitTo01GlNode;
    fit_from_01: FitFrom01GlNode;
    fit_from_01_to_variance: FitFrom01ToVarianceGlNode;
    float_to_int: FloatToIntGlNode;
    float_to_vec2: FloatToVec2GlNode;
    float_to_vec3: FloatToVec3GlNode;
    float_to_vec4: FloatToVec4GlNode;
    floor: FloorGlNode;
    fract: FractGlNode;
    fog: FogGlNode;
    for_loop: ForLoopGlNode;
    globals: GlobalsGlNode;
    hsluv_to_rgb: HsluvToRgbGlNode;
    hsv_to_rgb: HsvToRgbGlNode;
    if_then: IfThenGlNode;
    impostor_uv: ImpostorUvGlNode;
    int_to_float: FloatToIntGlNode;
    inverse_sqrt: InverseSqrtGlNode;
    instance_transform: InstanceTransformGlNode;
    length: LengthGlNode;
    log: LogGlNode;
    log2: Log2GlNode;
    luminance: LuminanceGlNode;
    max: MaxGlNode;
    max_length: MaxLengthGlNode;
    min: MinGlNode;
    mix: MixGlNode;
    mod: ModGlNode;
    model_view_matrix_mult: ModelViewMatrixMultGlNode;
    mult: MultGlNode;
    mult_add: MultAddGlNode;
    negate: NegateGlNode;
    noise: NoiseGlNode;
    normalize: NormalizeGlNode;
    null: NullGlNode;
    or: OrGlNode;
    output: OutputGlNode;
    param: ParamGlNode;
    pow: PowGlNode;
    quat_mult: QuatMultGlNode;
    quat_from_axis_angle: QuatFromAxisAngleGlNode;
    quat_to_angle: QuatToAngleGlNode;
    quat_to_axis: QuatToAxisGlNode;
    radians: RadiansGlNode;
    ramp: RampGlNode;
    random: RandomGlNode;
    reflect: ReflectGlNode;
    refract: RefractGlNode;
    rgb_to_hsv: RgbToHsvGlNode;
    rotate: RotateGlNode;
    round: RoundGlNode;
    sign: SignGlNode;
    sin: SinGlNode;
    smooth_step: SmoothStepGlNode;
    sphere: SphereGlNode;
    sqrt: SqrtGlNode;
    step: StepGlNode;
    subnet: SubnetGlNode;
    subnet_input: SubnetInputGlNode;
    subnet_output: SubnetOutputGlNode;
    substract: SubstractGlNode;
    switch: SwitchGlNode;
    tan: TanGlNode;
    texture: TextureGlNode;
    two_way_switch: TwoWaySwitchGlNode;
    varying_write: VaryingWriteGlNode;
    varying_read: VaryingReadGlNode;
    vec2_to_float: Vec2ToFloatGlNode;
    vec2_to_vec3: Vec2ToVec3GlNode;
    vec3_to_float: Vec3ToFloatGlNode;
    vec3_to_vec2: Vec3ToVec2GlNode;
    vec3_to_vec4: Vec3ToVec4GlNode;
    vec4_to_float: Vec4ToFloatGlNode;
    vec4_to_vec3: Vec4ToVec3GlNode;
    vector_align: VectorAlignGlNode;
    vector_angle: VectorAngleGlNode;
}
import { Poly } from '../../../Poly';
export declare class GlRegister {
    static run(poly: Poly): void;
}
