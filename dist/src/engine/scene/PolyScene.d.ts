import { CamerasController } from './utils/CamerasController';
import { Cooker } from './utils/Cooker';
import { CookController } from './utils/CookController';
import { CoreGraph } from '../../core/graph/CoreGraph';
import { CorePerformance } from '../../core/performance/CorePerformance';
import { DispatchController } from './utils/DispatchController';
import { ExpressionsController } from './utils/ExpressionsController';
import { LifeCycleController } from './utils/LifeCycleController';
import { LoadingController } from './utils/LoadingController';
import { MissingReferencesController } from './utils/MissingReferencesController';
import { NodesController } from './utils/NodesController';
import { SceneEventsDispatcher } from './utils/events/EventsDispatcher';
import { ReferencesController } from './utils/ReferencesController';
import { TimeController } from './utils/TimeController';
import { UniformsController } from './utils/UniformsController';
import { ViewersRegister } from './utils/ViewersRegister';
import { WebGLController } from './utils/WebGLController';
import { Scene } from 'three/src/scenes/Scene';
import { SceneAssetsController } from './utils/AssetsController';
import { SceneLibsController } from './utils/LibsController';
import { BaseNodeType } from '../nodes/_Base';
export declare class PolyScene {
    protected _default_scene: Scene;
    get default_scene(): Scene;
    _uuid: string;
    set_uuid(uuid: string): string;
    get uuid(): string;
    _name: string | undefined;
    set_name(name: string): string;
    get name(): string | undefined;
    protected _cameras_controller: CamerasController;
    get cameras_controller(): CamerasController;
    private _cooker;
    get cooker(): Cooker;
    private _assets_controller;
    get assets_controller(): SceneAssetsController;
    private _libs_controller;
    get libs_controller(): SceneLibsController;
    readonly cook_controller: CookController;
    wait_for_cooks_completed(): Promise<void>;
    private _dispatch_controller;
    get dispatch_controller(): DispatchController;
    private _events_dispatcher;
    get events_dispatcher(): SceneEventsDispatcher;
    private _graph;
    get graph(): CoreGraph;
    private _lifecycle_controller;
    get lifecycle_controller(): LifeCycleController;
    private _loading_controller;
    get loading_controller(): LoadingController;
    private _missing_expression_references_controller;
    get missing_expression_references_controller(): MissingReferencesController;
    private _expressions_controller;
    get expressions_controller(): ExpressionsController;
    protected _nodes_controller: NodesController;
    get nodes_controller(): NodesController;
    protected _references_controller: ReferencesController;
    get references_controller(): ReferencesController;
    protected _performance: CorePerformance | undefined;
    get performance(): CorePerformance;
    protected _viewers_register: ViewersRegister | undefined;
    get viewers_register(): ViewersRegister;
    protected _time_controller: TimeController;
    get time_controller(): TimeController;
    set_frame(frame: number): void;
    get frame(): number;
    get time(): number;
    get frame_range(): Number2;
    play(): void;
    pause(): void;
    private _serializer;
    private get serializer();
    to_json(): {
        nodes_by_graph_node_id: Dictionary<object>;
        params_by_graph_node_id: Dictionary<object>;
    };
    private _read_only;
    private _read_only_requester;
    mark_as_read_only(requester: BaseNodeType): void;
    read_only(): boolean;
    read_only_requester(): BaseNodeType | undefined;
    private _uniforms_controller;
    get uniforms_controller(): UniformsController;
    private _webgl_controller;
    get webgl_controller(): WebGLController;
    constructor();
    batch_update(callback: () => void): void;
    node(path: string): BaseNodeType | import("../nodes/manager/ObjectsManager").ObjectsManagerNode | null;
    get root(): import("../nodes/manager/ObjectsManager").ObjectsManagerNode;
}
