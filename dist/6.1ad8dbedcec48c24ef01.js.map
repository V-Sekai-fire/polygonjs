{"version":3,"sources":["webpack://POLY/./src/modules/three/examples/jsm/loaders/DRACOLoader.js"],"names":["DRACOLoader","manager","call","this","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","undefined","BYTES_PER_ELEMENT","name","worker","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","numComponents","num_components","numValues","num_points","dataType","Float32Array","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","HEAPF32","slice","_free","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numIndices","num_faces","GetTrianglesUInt32Array","decodeIndex","destroy","buffers","attr","WeakMap","releaseDecoderModule","getDecoderModule"],"mappings":"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","file":"6.1ad8dbedcec48c24ef01.js","sourcesContent":["import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tvar numFaces = dracoGeometry.num_faces();\n\t\tvar numIndices = numFaces * 3;\n\t\tvar byteLength = numIndices * 4;\n\n\t\tvar ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tvar index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tvar dataType = getDracoDataType( draco, attributeType );\n\n\t\tvar ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tvar array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n"],"sourceRoot":""}