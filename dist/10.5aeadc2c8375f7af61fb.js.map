{"version":3,"sources":["webpack://POLY/./src/modules/three/examples/jsm/loaders/PLYLoader.js"],"names":["PLYLoader","manager","call","this","propertyNameMapping","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setPropertyNameMapping","mapping","data","parseHeader","headerText","headerLength","result","exec","Blob","size","currentElement","lineType","lineValues","propertValues","property","header","comments","elements","objInfo","lines","split","i","length","line","trim","shift","join","format","version","push","undefined","name","count","parseInt","properties","type","countType","itemType","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","body","currentElementCount","handleElement","postProcess","geometry","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","ArrayBuffer","decodeText","Uint8Array","DataView","loc","parseBinary"],"mappings":"mGAAA,4FAiCIA,EAAY,SAAWC,GAE1B,IAAOC,KAAMC,KAAMF,GAEnBE,KAAKC,oBAAsB,IAI5BJ,EAAUK,UAAYC,OAAOC,OAAQD,OAAOE,OAAQ,IAAOH,WAAa,CAEvEI,YAAaT,EAEbU,KAAM,SAAWC,EAAKC,EAAQC,EAAYC,GAEzC,IAAIC,EAAQZ,KAERa,EAAS,IAAI,IAAYb,KAAKF,SAClCe,EAAOC,QAASd,KAAKe,MACrBF,EAAOG,gBAAiB,eACxBH,EAAOI,iBAAkBjB,KAAKkB,eAC9BL,EAAOM,mBAAoBnB,KAAKoB,iBAChCP,EAAON,KAAMC,GAAK,SAAWa,GAE5B,IAECZ,EAAQG,EAAMU,MAAOD,IAEpB,MAAQE,GAEJZ,EAEJA,EAASY,GAITC,QAAQC,MAAOF,GAIhBX,EAAMd,QAAQ4B,UAAWlB,MAIxBE,EAAYC,IAIhBgB,uBAAwB,SAAWC,GAElC5B,KAAKC,oBAAsB2B,GAI5BN,MAAO,SAAWO,GAEjB,SAASC,EAAaD,GAErB,IACIE,EAAa,GACbC,EAAe,EACfC,EAHgB,8BAGOC,KAAML,GAEjB,OAAXI,IAEJF,EAAaE,EAAQ,GACrBD,EAAe,IAAIG,KAAM,CAAEF,EAAQ,KAAQG,MAI5C,IAQIC,EACAC,EAAUC,EAEsBC,EAAevC,EAE9CwC,EAbDC,EAAS,CACZC,SAAU,GACVC,SAAU,GACVZ,aAAcA,EACda,QAAS,IAGNC,EAAQf,EAAWgB,MAAO,MA8B9B,IAAM,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAO,CAEzC,IAAIE,EAAOJ,EAAOE,GAGlB,GAAc,MAFdE,EAAOA,EAAKC,QAQZ,OAHAb,GADAC,EAAaW,EAAKH,MAAO,QACHK,QACtBF,EAAOX,EAAWc,KAAM,KAEff,GAER,IAAK,SAEJI,EAAOY,OAASf,EAAY,GAC5BG,EAAOa,QAAUhB,EAAY,GAE7B,MAED,IAAK,UAEJG,EAAOC,SAASa,KAAMN,GAEtB,MAED,IAAK,eAEoBO,IAAnBpB,GAEJK,EAAOE,SAASY,KAAMnB,IAIvBA,EAAiB,IACFqB,KAAOnB,EAAY,GAClCF,EAAesB,MAAQC,SAAUrB,EAAY,IAC7CF,EAAewB,WAAa,GAE5B,MAED,IAAK,WAEJxB,EAAewB,WAAWL,MArEOhB,EAqE0BD,EArEXtC,EAqEuBW,EAAMX,oBAnE3EwC,SAEmB,UAFnBA,EAAW,CAAEqB,KAAMtB,EAAe,KAExBsB,MAEbrB,EAASiB,KAAOlB,EAAe,GAC/BC,EAASsB,UAAYvB,EAAe,GACpCC,EAASuB,SAAWxB,EAAe,IAInCC,EAASiB,KAAOlB,EAAe,GAI3BC,EAASiB,QAAQzD,IAErBwC,EAASiB,KAAOzD,EAAqBwC,EAASiB,OAIxCjB,IAiDL,MAED,IAAK,WAEJC,EAAOG,QAAUK,EAEjB,MAGD,QAEC1B,QAAQyC,IAAK,YAAa3B,EAAUC,IAYvC,YANwBkB,IAAnBpB,GAEJK,EAAOE,SAASY,KAAMnB,GAIhBK,EAIR,SAASwB,EAAkBC,EAAGL,GAE7B,OAASA,GAER,IAAK,OAAQ,IAAK,QAAS,IAAK,QAAS,IAAK,SAAU,IAAK,MAAO,IAAK,OACzE,IAAK,OAAQ,IAAK,QAAS,IAAK,QAAS,IAAK,SAAU,IAAK,QAAS,IAAK,SAE1E,OAAOF,SAAUO,GAElB,IAAK,QAAS,IAAK,SAAU,IAAK,UAAW,IAAK,UAEjD,OAAOC,WAAYD,IAMtB,SAASE,EAAmBR,EAAYX,GAMvC,IAJA,IAAIoB,EAASpB,EAAKH,MAAO,OAErBwB,EAAU,GAEJvB,EAAI,EAAGA,EAAIa,EAAWZ,OAAQD,IAEvC,GAA8B,SAAzBa,EAAYb,GAAIc,KAAkB,CAKtC,IAHA,IAAIU,EAAO,GACPL,EAAID,EAAkBI,EAAOlB,QAASS,EAAYb,GAAIe,WAEhDU,EAAI,EAAGA,EAAIN,EAAGM,IAEvBD,EAAKhB,KAAMU,EAAkBI,EAAOlB,QAASS,EAAYb,GAAIgB,WAI9DO,EAASV,EAAYb,GAAIU,MAASc,OAIlCD,EAASV,EAAYb,GAAIU,MAASQ,EAAkBI,EAAOlB,QAASS,EAAYb,GAAIc,MAMtF,OAAOS,EAIR,SAASG,EAAY7C,EAAMa,GAI1B,IASIT,EATA0C,EAAS,CACZC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,IAAK,GACLC,cAAe,GACfC,OAAQ,IAMLC,EAAO,GACoC,QAAxCjD,EAFW,yBAEUC,KAAML,MAEjCqD,EAAOjD,EAAQ,IAQhB,IAJA,IAAIa,EAAQoC,EAAKnC,MAAO,MACpBV,EAAiB,EACjB8C,EAAsB,EAEhBnC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAO,CAEzC,IAAIE,EAAOJ,EAAOE,GAElB,GAAc,MADdE,EAAOA,EAAKC,QACZ,CAMKgC,GAAuBzC,EAAOE,SAAUP,GAAiBsB,QAE7DtB,IACA8C,EAAsB,GAIvB,IAAIZ,EAAUF,EAAmB3B,EAAOE,SAAUP,GAAiBwB,WAAYX,GAE/EkC,EAAeT,EAAQjC,EAAOE,SAAUP,GAAiBqB,KAAMa,GAE/DY,KAID,OAAOE,EAAaV,GAIrB,SAASU,EAAaV,GAErB,IAAIW,EAAW,IAAI,IAyCnB,OArCKX,EAAOC,QAAQ3B,OAAS,GAE5BqC,EAASC,SAAUZ,EAAOC,SAI3BU,EAASE,aAAc,WAAY,IAAI,IAAwBb,EAAOE,SAAU,IAI3EF,EAAOG,QAAQ7B,OAAS,GAE5BqC,EAASE,aAAc,SAAU,IAAI,IAAwBb,EAAOG,QAAS,IAIzEH,EAAOI,IAAI9B,OAAS,GAExBqC,EAASE,aAAc,KAAM,IAAI,IAAwBb,EAAOI,IAAK,IAIjEJ,EAAOM,OAAOhC,OAAS,GAE3BqC,EAASE,aAAc,QAAS,IAAI,IAAwBb,EAAOM,OAAQ,IAIvEN,EAAOK,cAAc/B,OAAS,IAElCqC,EAAWA,EAASG,gBACXD,aAAc,KAAM,IAAI,IAAwBb,EAAOK,cAAe,IAIhFM,EAASI,wBAEFJ,EAIR,SAASF,EAAeT,EAAQgB,EAAapB,GAE5C,GAAqB,WAAhBoB,EAEJhB,EAAOE,SAASrB,KAAMe,EAAQqB,EAAGrB,EAAQsB,EAAGtB,EAAQuB,GAE/C,OAAQvB,GAAW,OAAQA,GAAW,OAAQA,GAElDI,EAAOG,QAAQtB,KAAMe,EAAQwB,GAAIxB,EAAQyB,GAAIzB,EAAQ0B,IAIjD,MAAO1B,GAAW,MAAOA,GAE7BI,EAAOI,IAAIvB,KAAMe,EAAQ2B,EAAG3B,EAAQ4B,GAIhC,QAAS5B,GAAW,UAAWA,GAAW,SAAUA,GAExDI,EAAOM,OAAOzB,KAAMe,EAAQ6B,IAAM,IAAO7B,EAAQ8B,MAAQ,IAAO9B,EAAQ+B,KAAO,UAI1E,GAAqB,SAAhBX,EAAyB,CAEpC,IAAIY,EAAiBhC,EAAQgC,gBAAkBhC,EAAQiC,aACnDC,EAAWlC,EAAQkC,SAEQ,IAA1BF,EAAetD,QAEnB0B,EAAOC,QAAQpB,KAAM+C,EAAgB,GAAKA,EAAgB,GAAKA,EAAgB,IAE1EE,GAAgC,IAApBA,EAASxD,SAEzB0B,EAAOK,cAAcxB,KAAMiD,EAAU,GAAKA,EAAU,IACpD9B,EAAOK,cAAcxB,KAAMiD,EAAU,GAAKA,EAAU,IACpD9B,EAAOK,cAAcxB,KAAMiD,EAAU,GAAKA,EAAU,MAIhB,IAA1BF,EAAetD,SAE1B0B,EAAOC,QAAQpB,KAAM+C,EAAgB,GAAKA,EAAgB,GAAKA,EAAgB,IAC/E5B,EAAOC,QAAQpB,KAAM+C,EAAgB,GAAKA,EAAgB,GAAKA,EAAgB,MAQlF,SAASG,EAAYC,EAAUC,EAAI9C,EAAM+C,GAExC,OAAS/C,GAGR,IAAK,OAAS,IAAK,OAAS,MAAO,CAAE6C,EAASG,QAASF,GAAM,GAC7D,IAAK,QAAU,IAAK,QAAU,MAAO,CAAED,EAASI,SAAUH,GAAM,GAChE,IAAK,QAAU,IAAK,QAAU,MAAO,CAAED,EAASK,SAAUJ,EAAIC,GAAiB,GAC/E,IAAK,SAAU,IAAK,SAAU,MAAO,CAAEF,EAASM,UAAWL,EAAIC,GAAiB,GAChF,IAAK,QAAU,IAAK,MAAS,MAAO,CAAEF,EAASO,SAAUN,EAAIC,GAAiB,GAC9E,IAAK,SAAU,IAAK,OAAS,MAAO,CAAEF,EAASQ,UAAWP,EAAIC,GAAiB,GAC/E,IAAK,UAAW,IAAK,QAAU,MAAO,CAAEF,EAASS,WAAYR,EAAIC,GAAiB,GAClF,IAAK,UAAW,IAAK,SAAU,MAAO,CAAEF,EAASU,WAAYT,EAAIC,GAAiB,IAMpF,SAASS,EAAmBX,EAAUC,EAAI/C,EAAYgD,GAKrD,IAHA,IACI5E,EADAsC,EAAU,GACFgD,EAAO,EAETvE,EAAI,EAAGA,EAAIa,EAAWZ,OAAQD,IAEvC,GAA8B,SAAzBa,EAAYb,GAAIc,KAAkB,CAEtC,IAAIU,EAAO,GAGPL,GADJlC,EAASyE,EAAYC,EAAUC,EAAKW,EAAM1D,EAAYb,GAAIe,UAAW8C,IACrD,GAChBU,GAAQtF,EAAQ,GAEhB,IAAM,IAAIwC,EAAI,EAAGA,EAAIN,EAAGM,IAEvBxC,EAASyE,EAAYC,EAAUC,EAAKW,EAAM1D,EAAYb,GAAIgB,SAAU6C,GACpErC,EAAKhB,KAAMvB,EAAQ,IACnBsF,GAAQtF,EAAQ,GAIjBsC,EAASV,EAAYb,GAAIU,MAASc,OAIlCvC,EAASyE,EAAYC,EAAUC,EAAKW,EAAM1D,EAAYb,GAAIc,KAAM+C,GAChEtC,EAASV,EAAYb,GAAIU,MAASzB,EAAQ,GAC1CsF,GAAQtF,EAAQ,GAMlB,MAAO,CAAEsC,EAASgD,GAuCnB,IAAIjC,EACA1E,EAAQZ,KAEZ,GAAK6B,aAAgB2F,YAAc,CAElC,IAAInG,EAAO,IAAYoG,WAAY,IAAIC,WAAY7F,IAC/Ca,EAASZ,EAAaT,GAE1BiE,EAA6B,UAAlB5C,EAAOY,OAAqBoB,EAAYrD,EAAMqB,GA3C1D,SAAsBb,EAAMa,GAe3B,IAbA,IAWIT,EAXA0C,EAAS,CACZC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,IAAK,GACLC,cAAe,GACfC,OAAQ,IAGL4B,EAAoC,yBAAlBnE,EAAOY,OACzB4B,EAAO,IAAIyC,SAAU9F,EAAMa,EAAOV,cAC1B4F,EAAM,EAERvF,EAAiB,EAAGA,EAAiBK,EAAOE,SAASK,OAAQZ,IAEtE,IAAM,IAAI8C,EAAsB,EAAGA,EAAsBzC,EAAOE,SAAUP,GAAiBsB,MAAOwB,IAAyB,CAG1HyC,IADA3F,EAASqF,EAAmBpC,EAAM0C,EAAKlF,EAAOE,SAAUP,GAAiBwB,WAAYgD,IACtE,GACf,IAAItC,EAAUtC,EAAQ,GAEtBmD,EAAeT,EAAQjC,EAAOE,SAAUP,GAAiBqB,KAAMa,GAMjE,OAAOc,EAAaV,GAcgDkD,CAAahG,EAAMa,QAIvF4C,EAAWZ,EAAY7C,EAAMC,EAAaD,IAI3C,OAAOyD","file":"10.5aeadc2c8375f7af61fb.js","sourcesContent":["import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {LoaderUtils} from 'three/src/loaders/LoaderUtils';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tvar loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\n\nvar PLYLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.propertyNameMapping = {};\n\n};\n\nPLYLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: PLYLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetPropertyNameMapping: function ( mapping ) {\n\n\t\tthis.propertyNameMapping = mapping;\n\n\t},\n\n\tparse: function ( data ) {\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tvar patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n\t\t\tvar headerText = '';\n\t\t\tvar headerLength = 0;\n\t\t\tvar result = patternHeader.exec( data );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\theaderText = result[ 1 ];\n\t\t\t\theaderLength = new Blob( [ result[ 0 ] ] ).size;\n\n\t\t\t}\n\n\t\t\tvar header = {\n\t\t\t\tcomments: [],\n\t\t\t\telements: [],\n\t\t\t\theaderLength: headerLength,\n\t\t\t\tobjInfo: ''\n\t\t\t};\n\n\t\t\tvar lines = headerText.split( '\\n' );\n\t\t\tvar currentElement;\n\t\t\tvar lineType, lineValues;\n\n\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\tvar property = { type: propertValues[ 0 ] };\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t}\n\n\t\t\t\treturn property;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\tlineValues = line.split( /\\s+/ );\n\t\t\t\tlineType = lineValues.shift();\n\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'obj_info':\n\n\t\t\t\t\t\theader.objInfo = line;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t}\n\n\t\t\treturn header;\n\n\t\t}\n\n\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\tvar values = line.split( /\\s+/ );\n\n\t\t\tvar element = {};\n\n\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tvar list = [];\n\t\t\t\t\tvar n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn element;\n\n\t\t}\n\n\t\tfunction parseASCII( data, header ) {\n\n\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\tvar buffer = {\n\t\t\t\tindices: [],\n\t\t\t\tvertices: [],\n\t\t\t\tnormals: [],\n\t\t\t\tuvs: [],\n\t\t\t\tfaceVertexUvs: [],\n\t\t\t\tcolors: []\n\t\t\t};\n\n\t\t\tvar result;\n\n\t\t\tvar patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\tvar body = '';\n\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\tbody = result[ 1 ];\n\n\t\t\t}\n\n\t\t\tvar lines = body.split( '\\n' );\n\t\t\tvar currentElement = 0;\n\t\t\tvar currentElementCount = 0;\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElementCount >= header.elements[ currentElement ].count ) {\n\n\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\tcurrentElementCount = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar element = parseASCIIElement( header.elements[ currentElement ].properties, line );\n\n\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\tcurrentElementCount ++;\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\tfunction postProcess( buffer ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\t// mandatory buffer data\n\n\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t// optional buffer data\n\n\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction handleElement( buffer, elementName, element ) {\n\n\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\tbuffer.vertices.push( element.x, element.y, element.z );\n\n\t\t\t\tif ( 'nx' in element && 'ny' in element && 'nz' in element ) {\n\n\t\t\t\t\tbuffer.normals.push( element.nx, element.ny, element.nz );\n\n\t\t\t\t}\n\n\t\t\t\tif ( 's' in element && 't' in element ) {\n\n\t\t\t\t\tbuffer.uvs.push( element.s, element.t );\n\n\t\t\t\t}\n\n\t\t\t\tif ( 'red' in element && 'green' in element && 'blue' in element ) {\n\n\t\t\t\t\tbuffer.colors.push( element.red / 255.0, element.green / 255.0, element.blue / 255.0 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\tvar vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\tvar texcoord = element.texcoord;\n\n\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryRead( dataview, at, type, little_endian ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\tcase 'int8':\t\tcase 'char':\t return [ dataview.getInt8( at ), 1 ];\n\t\t\t\tcase 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8( at ), 1 ];\n\t\t\t\tcase 'int16':\t\tcase 'short':\t return [ dataview.getInt16( at, little_endian ), 2 ];\n\t\t\t\tcase 'uint16':\tcase 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];\n\t\t\t\tcase 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32( at, little_endian ), 4 ];\n\t\t\t\tcase 'uint32':\tcase 'uint':\t return [ dataview.getUint32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float32': case 'float':\t return [ dataview.getFloat32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryReadElement( dataview, at, properties, little_endian ) {\n\n\t\t\tvar element = {};\n\t\t\tvar result, read = 0;\n\n\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tvar list = [];\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );\n\t\t\t\t\tvar n = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );\n\t\t\t\t\t\tlist.push( result[ 0 ] );\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].type, little_endian );\n\t\t\t\t\telement[ properties[ i ].name ] = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn [ element, read ];\n\n\t\t}\n\n\t\tfunction parseBinary( data, header ) {\n\n\t\t\tvar buffer = {\n\t\t\t\tindices: [],\n\t\t\t\tvertices: [],\n\t\t\t\tnormals: [],\n\t\t\t\tuvs: [],\n\t\t\t\tfaceVertexUvs: [],\n\t\t\t\tcolors: []\n\t\t\t};\n\n\t\t\tvar little_endian = ( header.format === 'binary_little_endian' );\n\t\t\tvar body = new DataView( data, header.headerLength );\n\t\t\tvar result, loc = 0;\n\n\t\t\tfor ( var currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\tfor ( var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {\n\n\t\t\t\t\tresult = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );\n\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\tvar element = result[ 0 ];\n\n\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry;\n\t\tvar scope = this;\n\n\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\tvar text = LoaderUtils.decodeText( new Uint8Array( data ) );\n\t\t\tvar header = parseHeader( text );\n\n\t\t\tgeometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );\n\n\t\t} else {\n\n\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\nexport { PLYLoader };\n"],"sourceRoot":""}