import {CATEGORY_CSG} from './Category';

import {ArcCsgNode} from '../../../nodes/csg/Arc';
import {BooleanCsgNode} from '../../../nodes/csg/Boolean';
import {CenterCsgNode} from '../../../nodes/csg/Center';
import {CircleCsgNode} from '../../../nodes/csg/Circle';
import {ColorCsgNode} from '../../../nodes/csg/Color';
import {CopyCsgNode} from '../../../nodes/csg/Copy';
import {CubeCsgNode} from '../../../nodes/csg/Cube';
import {CylinderCsgNode} from '../../../nodes/csg/Cylinder';
import {CylinderEllipticCsgNode} from '../../../nodes/csg/CylinderElliptic';
import {DodecahedronCsgNode} from '../../../nodes/csg/Dodecahedron';
import {EllipseCsgNode} from '../../../nodes/csg/Ellipse';
import {EllipsoidCsgNode} from '../../../nodes/csg/Ellipsoid';
import {ExpandCsgNode} from '../../../nodes/csg/Expand';
// import {ExtrudeFromSlicesCsgNode} from '../../../nodes/csg/ExtrudeFromSlices';
import {ExtrudeLinearCsgNode} from '../../../nodes/csg/ExtrudeLinear';
import {ExtrudeRectangularCsgNode} from '../../../nodes/csg/ExtrudeRectangular';
import {ExtrudeRotateCsgNode} from '../../../nodes/csg/ExtrudeRotate';
import {HullCsgNode} from '../../../nodes/csg/Hull';
import {LineCsgNode} from '../../../nodes/csg/Line';
import {MergeCsgNode} from '../../../nodes/csg/Merge';
import {MirrorCsgNode} from '../../../nodes/csg/Mirror';
import {NullCsgNode} from '../../../nodes/csg/Null';
import {OffsetCsgNode} from '../../../nodes/csg/Offset';
import {PolygonCsgNode} from '../../../nodes/csg/Polygon';
import {PolyhedronCsgNode} from '../../../nodes/csg/PolyHedron';
import {ProjectCsgNode} from '../../../nodes/csg/Project';
import {RectangleCsgNode} from '../../../nodes/csg/Rectangle';
import {ResetTransformCsgNode} from '../../../nodes/csg/ResetTransform';
import {RotateCsgNode} from '../../../nodes/csg/Rotate';
import {ScaleCsgNode} from '../../../nodes/csg/Scale';
import {SphereCsgNode} from '../../../nodes/csg/Sphere';
import {StarCsgNode} from '../../../nodes/csg/Star';
import {SwitchCsgNode} from '../../../nodes/csg/Switch';
import {TorusCsgNode} from '../../../nodes/csg/Torus';
import {TranslateCsgNode} from '../../../nodes/csg/Translate';
import {TriangleCsgNode} from '../../../nodes/csg/Triangle';

export interface CsgNodeChildrenMap {
	arc: ArcCsgNode;
	boolean: BooleanCsgNode;
	center: CenterCsgNode;
	circle: CircleCsgNode;
	color: ColorCsgNode;
	copy: CopyCsgNode;
	cube: CubeCsgNode;
	cylinder: CylinderCsgNode;
	CylinderElliptic: CylinderEllipticCsgNode;
	dodecahedron: DodecahedronCsgNode;
	ellipse: EllipseCsgNode;
	ellipsoid: EllipsoidCsgNode;
	expand: ExpandCsgNode;
	// extrudeFromSlices: ExtrudeFromSlicesCsgNode;
	extrudeLinear: ExtrudeLinearCsgNode;
	extrudeRectangular: ExtrudeRectangularCsgNode;
	extrudeRotate: ExtrudeRotateCsgNode;
	hull: HullCsgNode;
	line: LineCsgNode;
	merge: MergeCsgNode;
	mirror: MirrorCsgNode;
	null: NullCsgNode;
	offset: OffsetCsgNode;
	polygon: PolygonCsgNode;
	polyhedron: PolyhedronCsgNode;
	project: ProjectCsgNode;
	rectangle: RectangleCsgNode;
	resetTransform: ResetTransformCsgNode;
	rotate: RotateCsgNode;
	scale: ScaleCsgNode;
	sphere: SphereCsgNode;
	star: StarCsgNode;
	switch: SwitchCsgNode;
	torus: TorusCsgNode;
	translate: TranslateCsgNode;
	triangle: TriangleCsgNode;
}

import {PolyEngine} from '../../../Poly';
export class CsgRegister {
	static run(poly: PolyEngine) {
		poly.registerNode(ArcCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(BooleanCsgNode, CATEGORY_CSG.MODIFIER);
		poly.registerNode(CenterCsgNode, CATEGORY_CSG.TRANSFORM);
		poly.registerNode(CircleCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(ColorCsgNode, CATEGORY_CSG.MODIFIER);
		poly.registerNode(CopyCsgNode, CATEGORY_CSG.ADVANCED);
		poly.registerNode(CubeCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(CylinderCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(CylinderEllipticCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(DodecahedronCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(EllipseCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(EllipsoidCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(ExpandCsgNode, CATEGORY_CSG.MODIFIER);
		// poly.registerNode(ExtrudeFromSlicesCsgNode, CATEGORY_CSG.EXTRUDE);
		poly.registerNode(ExtrudeLinearCsgNode, CATEGORY_CSG.EXTRUDE);
		poly.registerNode(ExtrudeRectangularCsgNode, CATEGORY_CSG.EXTRUDE);
		poly.registerNode(ExtrudeRotateCsgNode, CATEGORY_CSG.EXTRUDE);
		poly.registerNode(HullCsgNode, CATEGORY_CSG.MODIFIER);
		poly.registerNode(LineCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(MergeCsgNode, CATEGORY_CSG.FLOW);
		poly.registerNode(MirrorCsgNode, CATEGORY_CSG.TRANSFORM);
		poly.registerNode(NullCsgNode, CATEGORY_CSG.FLOW);
		poly.registerNode(OffsetCsgNode, CATEGORY_CSG.MODIFIER);
		poly.registerNode(PolygonCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(PolyhedronCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(ProjectCsgNode, CATEGORY_CSG.EXTRUDE);
		poly.registerNode(RectangleCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(ResetTransformCsgNode, CATEGORY_CSG.MODIFIER);
		poly.registerNode(RotateCsgNode, CATEGORY_CSG.TRANSFORM);
		poly.registerNode(ScaleCsgNode, CATEGORY_CSG.TRANSFORM);
		poly.registerNode(SphereCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(StarCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(SwitchCsgNode, CATEGORY_CSG.FLOW);
		poly.registerNode(TorusCsgNode, CATEGORY_CSG.PRIMITIVES);
		poly.registerNode(TranslateCsgNode, CATEGORY_CSG.TRANSFORM);
		poly.registerNode(TriangleCsgNode, CATEGORY_CSG.PRIMITIVES);
	}
}
