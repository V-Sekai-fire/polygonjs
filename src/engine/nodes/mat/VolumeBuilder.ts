/**
 * Creates a Mesh Standard Material, which can be extended with GL nodes.
 *
 * @remarks
 * This node can create children, which will be GL nodes. The GLSL code generated by the nodes will extend the Material. This is experimental.
 *
 */
import {BaseBuilderParamConfig, TypedBuilderMatNode} from './_BaseBuilder';
import {ShaderAssemblerVolume} from '../gl/code/assemblers/materials/Volume';

import {NodeParamsConfig} from '../utils/params/ParamsConfig';
import {VolumeController, VolumeParamConfig} from './utils/VolumeController';
import {AssemblerName} from '../../poly/registers/assemblers/_BaseRegister';
import {Poly} from '../../Poly';
class VolumeMatParamsConfig extends BaseBuilderParamConfig(VolumeParamConfig(NodeParamsConfig)) {}
const ParamsConfig = new VolumeMatParamsConfig();

export class VolumeBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerVolume, VolumeMatParamsConfig> {
	params_config = ParamsConfig;
	static type() {
		return 'volumeBuilder';
	}
	public usedAssembler(): Readonly<AssemblerName.GL_VOLUME> {
		return AssemblerName.GL_VOLUME;
	}
	protected _create_assembler_controller() {
		return Poly.assemblersRegister.assembler(this, this.usedAssembler());
	}

	private _volume_controller = new VolumeController(this);

	initializeNode() {}
	async cook() {
		this.compile_if_required();

		this._volume_controller.update_uniforms_from_params();

		this.setMaterial(this.material);
	}
}
