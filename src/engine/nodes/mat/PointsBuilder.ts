/**
 * Creates a Points Material, which can be extended with GL nodes.
 *
 * @remarks
 * This node can create children, which will be GL nodes. The GLSL code generated by the nodes will extend the Material.
 *
 */
import {NodeParamsConfig} from '../utils/params/ParamsConfig';
import {UniformsTransparencyParamConfig, UniformsTransparencyController} from './utils/UniformsTransparencyController';
import {AdvancedCommonController, AdvancedCommonParamConfig} from './utils/AdvancedCommonController';
import {ShaderAssemblerPoints} from '../gl/code/assemblers/materials/Points';
import {TypedBuilderMatNode, BaseBuilderParamConfig} from './_BaseBuilder';
import {AssemblerName} from '../../poly/registers/assemblers/_BaseRegister';
import {Poly} from '../../Poly';
import {FogParamConfig, FogController} from './utils/UniformsFogController';
import {DefaultFolderParamConfig} from './utils/DefaultFolder';
import {AdvancedFolderParamConfig} from './utils/AdvancedFolder';
import {CustomMaterialName} from '../../../core/geometry/Material';
import {Material} from 'three';
import {PointsMaterial} from 'three';
import {PointsSizeController, PointsParamConfig} from './utils/PointsSizeController';

interface PointsBuilderControllers {
	advancedCommon: AdvancedCommonController;
}
interface PointsBuilderMaterial extends PointsMaterial {
	vertexShader: string;
	fragmentShader: string;
	customMaterials: {
		[key in CustomMaterialName]?: Material;
	};
}

class PointsBuilderMatParamsConfig extends FogParamConfig(
	AdvancedCommonParamConfig(
		BaseBuilderParamConfig(
			/* advanced */ AdvancedFolderParamConfig(
				UniformsTransparencyParamConfig(PointsParamConfig(DefaultFolderParamConfig(NodeParamsConfig)))
			)
		)
	)
) {}
const ParamsConfig = new PointsBuilderMatParamsConfig();

export class PointsBuilderMatNode extends TypedBuilderMatNode<
	PointsBuilderMaterial,
	ShaderAssemblerPoints,
	PointsBuilderMatParamsConfig
> {
	override paramsConfig = ParamsConfig;
	static override type() {
		return 'pointsBuilder';
	}
	public override usedAssembler(): Readonly<AssemblerName.GL_POINTS> {
		return AssemblerName.GL_POINTS;
	}
	protected _createAssemblerController() {
		return Poly.assemblersRegister.assembler(this, this.usedAssembler());
	}
	readonly controllers: PointsBuilderControllers = {
		advancedCommon: new AdvancedCommonController(this),
	};
	private controllerNames = Object.keys(this.controllers) as Array<keyof PointsBuilderControllers>;

	override initializeNode() {
		this.params.onParamsCreated('init controllers', () => {
			for (let controllerName of this.controllerNames) {
				this.controllers[controllerName].initializeNode();
			}
		});
	}
	override async cook() {
		for (let controllerName of this.controllerNames) {
			this.controllers[controllerName].update();
		}

		UniformsTransparencyController.update(this);
		FogController.update(this);
		PointsSizeController.update(this);

		this.compileIfRequired();

		this.setMaterial(this.material);
	}
}
