{"version":3,"file":"index.module.js","sources":["../src/core/HalfEdgeMap.js","../src/core/utils.js","../src/core/Brush.js","../src/core/IntersectionMap.js","../src/core/constants.js","../src/core/operationsUtils.js","../src/core/TriangleSplitter.js","../src/core/TypeBackedArray.js","../src/core/TypedAttributeData.js","../src/core/OperationDebugData.js","../src/core/operations.js","../src/core/Evaluator.js","../src/core/Operation.js","../src/core/OperationGroup.js","../src/materials/shaderUtils.js","../src/materials/GridMaterial.js","../src/core/debugUtils.js","../src/objects/TriangleSetHelper.js","../src/objects/EdgesHelper.js","../src/objects/PointsHelper.js","../src/objects/HalfEdgeHelper.js"],"sourcesContent":["import { Vector3 } from 'three';\r\n\r\nconst _vertices = [ new Vector3(), new Vector3(), new Vector3() ];\r\n\r\nfunction hashNumber( v ) {\r\n\r\n\treturn ~ ~ ( v * 1e4 );\r\n\r\n}\r\n\r\nfunction hashVertex( v ) {\r\n\r\n\treturn `${ hashNumber( v.x ) },${ hashNumber( v.y ) },${ hashNumber( v.z ) }`;\r\n\r\n}\r\n\r\nexport class HalfEdgeMap {\r\n\r\n\tconstructor( geometry = null ) {\r\n\r\n\t\tthis.data = null;\r\n\t\tthis.unmatchedEdges = null;\r\n\t\tthis.matchedEdges = null;\r\n\t\tthis.useDrawRange = true;\r\n\r\n\t\tif ( geometry ) {\r\n\r\n\t\t\tthis.updateFrom( geometry );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetSiblingTriangleIndex( triIndex, edgeIndex ) {\r\n\r\n\t\tconst otherIndex = this.data[ triIndex * 3 + edgeIndex ];\r\n\t\treturn otherIndex === - 1 ? - 1 : ~ ~ ( otherIndex / 3 );\r\n\r\n\t}\r\n\r\n\tgetSiblingEdgeIndex( triIndex, edgeIndex ) {\r\n\r\n\t\tconst otherIndex = this.data[ triIndex * 3 + edgeIndex ];\r\n\t\treturn otherIndex === - 1 ? - 1 : ( otherIndex % 3 );\r\n\r\n\t}\r\n\r\n\tupdateFrom( geometry ) {\r\n\r\n\t\t// runs on the assumption that there is a 1 : 1 match of edges\r\n\t\tconst map = new Map();\r\n\r\n\t\t// attributes\r\n\t\tconst { attributes } = geometry;\r\n\t\tconst indexAttr = geometry.index;\r\n\t\tconst posAttr = attributes.position;\r\n\r\n\t\t// get the potential number of triangles\r\n\t\tlet triCount = indexAttr ? indexAttr.count / 3 : posAttr.count / 3;\r\n\t\tconst maxTriCount = triCount;\r\n\r\n\t\t// get the real number of triangles from the based on the draw range\r\n\t\tlet offset = 0;\r\n\t\tif ( this.useDrawRange ) {\r\n\r\n\t\t\toffset = geometry.drawRange.start;\r\n\t\t\tif ( geometry.drawRange.count !== Infinity ) {\r\n\r\n\t\t\t\ttriCount = ~ ~ ( geometry.drawRange.count / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// initialize the connectivity buffer - 1 means no connectivity\r\n\t\tlet data = this.data;\r\n\t\tif ( ! data || data.length < 3 * maxTriCount ) {\r\n\r\n\t\t\tdata = new Int32Array( 3 * maxTriCount );\r\n\r\n\t\t}\r\n\r\n\t\tdata.fill( - 1 );\r\n\r\n\t\t// iterate over all triangles\r\n\t\tlet unmatchedEdges = 0;\r\n\t\tlet matchedEdges = 0;\r\n\t\tfor ( let i = 0; i < triCount; i ++ ) {\r\n\r\n\t\t\tconst i3 = 3 * i + offset;\r\n\t\t\tfor ( let e = 0; e < 3; e ++ ) {\r\n\r\n\t\t\t\tlet i0 = i3 + e;\r\n\t\t\t\tif ( indexAttr ) {\r\n\r\n\t\t\t\t\ti0 = indexAttr.getX( i0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_vertices[ e ].fromBufferAttribute( posAttr, i0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let e = 0; e < 3; e ++ ) {\r\n\r\n\t\t\t\tconst nextE = ( e + 1 ) % 3;\r\n\t\t\t\tconst _vec0 = _vertices[ e ];\r\n\t\t\t\tconst _vec1 = _vertices[ nextE ];\r\n\r\n\t\t\t\tconst vh0 = hashVertex( _vec0 );\r\n\t\t\t\tconst vh1 = hashVertex( _vec1 );\r\n\r\n\t\t\t\tconst reverseHash = `${ vh1 }_${ vh0 }`;\r\n\t\t\t\tif ( map.has( reverseHash ) ) {\r\n\r\n\t\t\t\t\t// create a reference between the two triangles and clear the hash\r\n\t\t\t\t\tconst otherIndex = map.get( reverseHash );\r\n\t\t\t\t\tdata[ i3 + e ] = otherIndex;\r\n\t\t\t\t\tdata[ otherIndex ] = i3 + e;\r\n\t\t\t\t\tmap.delete( reverseHash );\r\n\t\t\t\t\tunmatchedEdges --;\r\n\t\t\t\t\tmatchedEdges ++;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// save the triangle and triangle edge index captured in one value\r\n\t\t\t\t\t// triIndex = ~ ~ ( i0 / 3 );\r\n\t\t\t\t\t// edgeIndex = i0 % 3;\r\n\t\t\t\t\tconst hash = `${ vh0 }_${ vh1 }`;\r\n\t\t\t\t\tmap.set( hash, i3 + e );\r\n\t\t\t\t\tunmatchedEdges ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.matchedEdges = matchedEdges;\r\n\t\tthis.unmatchedEdges = unmatchedEdges;\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n}\r\n","export function areSharedArrayBuffersSupported() {\n\n\treturn typeof SharedArrayBuffer !== 'undefined';\n\n}\n\nexport function convertToSharedArrayBuffer( array ) {\n\n\tif ( array.buffer instanceof SharedArrayBuffer ) {\n\n\t\treturn array;\n\n\t}\n\n\tconst cons = array.constructor;\n\tconst buffer = array.buffer;\n\tconst sharedBuffer = new SharedArrayBuffer( buffer.byteLength );\n\n\tconst uintArray = new Uint8Array( buffer );\n\tconst sharedUintArray = new Uint8Array( sharedBuffer );\n\tsharedUintArray.set( uintArray, 0 );\n\n\treturn new cons( sharedBuffer );\n\n}\n","import { Mesh, Matrix4 } from 'three';\r\nimport { MeshBVH } from 'three-mesh-bvh';\r\nimport { HalfEdgeMap } from './HalfEdgeMap.js';\r\nimport { areSharedArrayBuffersSupported, convertToSharedArrayBuffer } from './utils.js';\r\n\r\nexport class Brush extends Mesh {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isBrush = true;\r\n\t\tthis._previousMatrix = new Matrix4();\r\n\t\tthis._previousMatrix.elements.fill( 0 );\r\n\r\n\t}\r\n\r\n\tmarkUpdated() {\r\n\r\n\t\tthis._previousMatrix.copy( this.matrix );\r\n\r\n\t}\r\n\r\n\tisDirty() {\r\n\r\n\t\tconst { matrix, _previousMatrix } = this;\r\n\t\tconst el1 = matrix.elements;\r\n\t\tconst el2 = _previousMatrix.elements;\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( el1[ i ] !== el2[ i ] ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tprepareGeometry() {\r\n\r\n\t\t// generate shared array buffers\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tif ( areSharedArrayBuffersSupported() ) {\r\n\r\n\t\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\t\tconst attribute = attributes[ key ];\r\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Brush: InterleavedBufferAttributes are not supported.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattribute.array = convertToSharedArrayBuffer( attribute.array );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate bounds tree\r\n\t\tif ( ! geometry.boundsTree ) {\r\n\r\n\t\t\tgeometry.boundsTree = new MeshBVH( geometry, { maxLeafTris: 3 } );\r\n\t\t\tif ( geometry.halfEdges ) {\r\n\r\n\t\t\t\tgeometry.halfEdges.updateFrom( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate half edges\r\n\t\tif ( ! geometry.halfEdges ) {\r\n\r\n\t\t\tgeometry.halfEdges = new HalfEdgeMap( geometry );\r\n\r\n\t\t}\r\n\r\n\t\t// save group indices for materials\r\n\t\tif ( ! geometry.groupIndices ) {\r\n\r\n\t\t\tconst triCount = geometry.index.count / 3;\r\n\t\t\tconst array = new Uint16Array( triCount );\r\n\t\t\tconst groups = geometry.groups;\r\n\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst { start, count } = groups[ i ];\r\n\t\t\t\tfor ( let g = start / 3, lg = ( start + count ) / 3; g < lg; g ++ ) {\r\n\r\n\t\t\t\t\tarray[ g ] = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.groupIndices = array;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdisposeCacheData() {\r\n\r\n\t\tconst { geometry } = this;\r\n\t\tgeometry.halfEdges = null;\r\n\t\tgeometry.boundsTree = null;\r\n\t\tgeometry.groupIndices = null;\r\n\r\n\t}\r\n\r\n}\r\n","export class IntersectionMap {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.intersectionSet = {};\r\n\t\tthis.ids = [];\r\n\r\n\t}\r\n\r\n\tadd( id, intersectionId ) {\r\n\r\n\t\tconst { intersectionSet, ids } = this;\r\n\t\tif ( ! intersectionSet[ id ] ) {\r\n\r\n\t\t\tintersectionSet[ id ] = [];\r\n\t\t\tids.push( id );\r\n\r\n\t\t}\r\n\r\n\t\tintersectionSet[ id ].push( intersectionId );\r\n\r\n\t}\r\n\r\n}\r\n","export const ADDITION = 0;\r\nexport const SUBTRACTION = 1;\r\nexport const DIFFERENCE = 3;\r\nexport const INTERSECTION = 4;\r\n","import { Ray, Matrix4, DoubleSide, Vector3, Vector4, Triangle, Line3 } from 'three';\r\nimport { IntersectionMap } from './IntersectionMap.js';\r\nimport { ADDITION, SUBTRACTION, INTERSECTION, DIFFERENCE } from './constants.js';\r\n\r\nconst _ray = new Ray();\r\nconst _matrix = new Matrix4();\r\nconst _tri = new Triangle();\r\nconst _vec3 = new Vector3();\r\nconst _vec4a = new Vector4();\r\nconst _vec4b = new Vector4();\r\nconst _vec4c = new Vector4();\r\nconst _vec4_0 = new Vector4();\r\nconst _vec4_1 = new Vector4();\r\nconst _vec4_2 = new Vector4();\r\nconst _edge = new Line3();\r\nconst JITTER_EPSILON = 1e-8;\r\n\r\nexport const COPLANAR = 0;\r\nexport const BACK_SIDE = - 1;\r\nexport const FRONT_SIDE = 1;\r\n\r\nexport const INVERT_TRI = 0;\r\nexport const ADD_TRI = 1;\r\nexport const SKIP_TRI = 2;\r\n\r\nlet _debugContext = null;\r\nexport function setDebugContext( debugData ) {\r\n\r\n\t_debugContext = debugData;\r\n\r\n}\r\n\r\nexport function getHitSide( tri, bvh ) {\r\n\r\n\t// random function that returns [ - 0.5, 0.5 ];\r\n\tfunction rand() {\r\n\r\n\t\treturn Math.random() - 0.5;\r\n\r\n\t}\r\n\r\n\t// get the ray the check the triangle for\r\n\t_ray.origin.copy( tri.a ).add( tri.b ).add( tri.c ).multiplyScalar( 1 / 3 );\r\n\ttri.getNormal( _ray.direction );\r\n\r\n\tconst total = 3;\r\n\tlet count = 0;\r\n\tlet minDistance = Infinity;\r\n\tfor ( let i = 0; i < total; i ++ ) {\r\n\r\n\t\t// jitter the ray slightly\r\n\t\t_ray.direction.x += rand() * JITTER_EPSILON;\r\n\t\t_ray.direction.y += rand() * JITTER_EPSILON;\r\n\t\t_ray.direction.z += rand() * JITTER_EPSILON;\r\n\r\n\t\t// check if the ray hit the backside\r\n\t\tconst hit = bvh.raycastFirst( _ray, DoubleSide );\r\n\t\tlet hitBackSide = Boolean( hit && _ray.direction.dot( hit.face.normal ) > 0 );\r\n\t\tif ( hitBackSide ) {\r\n\r\n\t\t\tcount ++;\r\n\r\n\t\t}\r\n\r\n\t\tif ( hit !== null ) {\r\n\r\n\t\t\tminDistance = Math.min( minDistance, hit.distance );\r\n\r\n\t\t}\r\n\r\n\t\t// if our current casts meet our requirements then early out\r\n\t\tif ( minDistance === 0 || count / total > 0.5 || ( i - count + 1 ) / total > 0.5 ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// if we're right up against another face then we're coplanar\r\n\tif ( minDistance === 0 ) {\r\n\r\n\t\treturn COPLANAR;\r\n\r\n\t} else {\r\n\r\n\t\treturn count / total > 0.5 ? BACK_SIDE : FRONT_SIDE;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// returns the intersected triangles and returns objects mapping triangle indices to\r\n// the other triangles intersected\r\nexport function collectIntersectingTriangles( a, b ) {\r\n\r\n\tconst aIntersections = new IntersectionMap();\r\n\tconst bIntersections = new IntersectionMap();\r\n\r\n\t_matrix\r\n\t\t.copy( a.matrixWorld )\r\n\t\t.invert()\r\n\t\t.multiply( b.matrixWorld );\r\n\r\n\ta.geometry.boundsTree.bvhcast( b.geometry.boundsTree, _matrix, {\r\n\r\n\t\tintersectsTriangles( triangleA, triangleB, ia, ib ) {\r\n\r\n\t\t\tif ( triangleA.intersectsTriangle( triangleB, _edge ) && _edge.distance() > 1e-5 ) {\r\n\r\n\t\t\t\taIntersections.add( ia, ib );\r\n\t\t\t\tbIntersections.add( ib, ia );\r\n\r\n\t\t\t\tif ( _debugContext ) {\r\n\r\n\t\t\t\t\t_debugContext.addEdge( _edge );\r\n\t\t\t\t\t_debugContext.addIntersectingTriangles( ia, triangleA, ib, triangleB );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn { aIntersections, bIntersections };\r\n\r\n}\r\n\r\n// Add the barycentric interpolated values fro the triangle into the new attribute data\r\nexport function appendAttributeFromTriangle(\r\n\ttriIndex,\r\n\tbaryCoordTri,\r\n\tgeometry,\r\n\tmatrixWorld,\r\n\tnormalMatrix,\r\n\tattributeInfo,\r\n\tinvert = false,\r\n) {\r\n\r\n\tconst attributes = geometry.attributes;\r\n\tconst indexAttr = geometry.index;\r\n\tconst i3 = triIndex * 3;\r\n\tconst i0 = indexAttr.getX( i3 + 0 );\r\n\tconst i1 = indexAttr.getX( i3 + 1 );\r\n\tconst i2 = indexAttr.getX( i3 + 2 );\r\n\r\n\tfor ( const key in attributeInfo ) {\r\n\r\n\t\t// check if the key we're asking for is in the geometry at all\r\n\t\tconst attr = attributes[ key ];\r\n\t\tconst arr = attributeInfo[ key ];\r\n\t\tif ( ! ( key in attributes ) ) {\r\n\r\n\t\t\tthrow new Error( `CSG Operations: Attribute ${ key } not available on geometry.` );\r\n\r\n\t\t}\r\n\r\n\t\t// handle normals and positions specially because they require transforming\r\n\t\t// TODO: handle tangents\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tif ( key === 'position' ) {\r\n\r\n\t\t\t_tri.a.fromBufferAttribute( attr, i0 ).applyMatrix4( matrixWorld );\r\n\t\t\t_tri.b.fromBufferAttribute( attr, i1 ).applyMatrix4( matrixWorld );\r\n\t\t\t_tri.c.fromBufferAttribute( attr, i2 ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\tpushBarycoordInterpolatedValues( _tri.a, _tri.b, _tri.c, baryCoordTri, 3, arr, invert );\r\n\r\n\t\t} else if ( key === 'normal' ) {\r\n\r\n\t\t\t_tri.a.fromBufferAttribute( attr, i0 ).applyNormalMatrix( normalMatrix );\r\n\t\t\t_tri.b.fromBufferAttribute( attr, i1 ).applyNormalMatrix( normalMatrix );\r\n\t\t\t_tri.c.fromBufferAttribute( attr, i2 ).applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\tif ( invert ) {\r\n\r\n\t\t\t\t_tri.a.multiplyScalar( - 1 );\r\n\t\t\t\t_tri.b.multiplyScalar( - 1 );\r\n\t\t\t\t_tri.c.multiplyScalar( - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpushBarycoordInterpolatedValues( _tri.a, _tri.b, _tri.c, baryCoordTri, 3, arr, invert, true );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_vec4a.fromBufferAttribute( attr, i0 );\r\n\t\t\t_vec4b.fromBufferAttribute( attr, i1 );\r\n\t\t\t_vec4c.fromBufferAttribute( attr, i2 );\r\n\r\n\t\t\tpushBarycoordInterpolatedValues( _vec4a, _vec4b, _vec4c, baryCoordTri, itemSize, arr, invert );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Append all the values of the attributes for the triangle onto the new attribute arrays\r\nexport function appendAttributesFromIndices(\r\n\ti0,\r\n\ti1,\r\n\ti2,\r\n\tattributes,\r\n\tmatrixWorld,\r\n\tnormalMatrix,\r\n\tattributeInfo,\r\n\tinvert = false,\r\n) {\r\n\r\n\tappendAttributeFromIndex( i0, attributes, matrixWorld, normalMatrix, attributeInfo, invert );\r\n\tappendAttributeFromIndex( i1, attributes, matrixWorld, normalMatrix, attributeInfo, invert );\r\n\tappendAttributeFromIndex( i2, attributes, matrixWorld, normalMatrix, attributeInfo, invert );\r\n\r\n}\r\n\r\n// Returns the triangle to add when performing an operation\r\nexport function getOperationAction( operation, hitSide, invert = false ) {\r\n\r\n\tswitch ( operation ) {\r\n\r\n\t\tcase ADDITION:\r\n\t\t\tif ( hitSide === FRONT_SIDE || ( hitSide === COPLANAR && invert ) ) {\r\n\r\n\t\t\t\treturn ADD_TRI;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase SUBTRACTION:\r\n\r\n\t\t\tif ( invert ) {\r\n\r\n\t\t\t\tif ( hitSide === BACK_SIDE ) {\r\n\r\n\t\t\t\t\treturn INVERT_TRI;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( hitSide === FRONT_SIDE ) {\r\n\r\n\t\t\t\t\treturn ADD_TRI;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase DIFFERENCE:\r\n\t\t\tif ( hitSide === BACK_SIDE ) {\r\n\r\n\t\t\t\treturn INVERT_TRI;\r\n\r\n\t\t\t} else if ( hitSide === FRONT_SIDE ) {\r\n\r\n\t\t\t\treturn ADD_TRI;\r\n\r\n\t\t\t}\r\n\r\n\t\tcase INTERSECTION:\r\n\t\t\tif ( hitSide === BACK_SIDE || ( hitSide === COPLANAR && invert ) ) {\r\n\r\n\t\t\t\treturn ADD_TRI;\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error( `Unrecognized CSG operation enum \"${ operation }\".` );\r\n\r\n\t}\r\n\r\n\treturn SKIP_TRI;\r\n\r\n}\r\n\r\n// takes a set of barycentric values in the form of a triangle, a set of vectors, number of components,\r\n// and whether to invert the result and pushes the new values onto the provided attribute array\r\nfunction pushBarycoordInterpolatedValues( v0, v1, v2, baryCoordTri, itemSize, attrArr, invert = false, normalize = false ) {\r\n\r\n\t// adds the appropriate number of values for the vector onto the array\r\n\tconst addValues = v => {\r\n\r\n\t\tattrArr.push( v.x );\r\n\t\tif ( itemSize > 1 ) attrArr.push( v.y );\r\n\t\tif ( itemSize > 2 ) attrArr.push( v.z );\r\n\t\tif ( itemSize > 3 ) attrArr.push( v.w );\r\n\r\n\t};\r\n\r\n\t// barycentric interpolate the first component\r\n\t_vec4_0.set( 0, 0, 0, 0 )\r\n\t\t.addScaledVector( v0, baryCoordTri.a.x )\r\n\t\t.addScaledVector( v1, baryCoordTri.a.y )\r\n\t\t.addScaledVector( v2, baryCoordTri.a.z );\r\n\r\n\t_vec4_1.set( 0, 0, 0, 0 )\r\n\t\t.addScaledVector( v0, baryCoordTri.b.x )\r\n\t\t.addScaledVector( v1, baryCoordTri.b.y )\r\n\t\t.addScaledVector( v2, baryCoordTri.b.z );\r\n\r\n\t_vec4_2.set( 0, 0, 0, 0 )\r\n\t\t.addScaledVector( v0, baryCoordTri.c.x )\r\n\t\t.addScaledVector( v1, baryCoordTri.c.y )\r\n\t\t.addScaledVector( v2, baryCoordTri.c.z );\r\n\r\n\tif ( normalize ) {\r\n\r\n\t\t_vec4_0.normalize();\r\n\t\t_vec4_1.normalize();\r\n\t\t_vec4_2.normalize();\r\n\r\n\t}\r\n\r\n\t// if the face is inverted then add the values in an inverted order\r\n\taddValues( _vec4_0 );\r\n\r\n\tif ( invert ) {\r\n\r\n\t\taddValues( _vec4_2 );\r\n\t\taddValues( _vec4_1 );\r\n\r\n\t} else {\r\n\r\n\t\taddValues( _vec4_1 );\r\n\t\taddValues( _vec4_2 );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Adds the values for the given vertex index onto the new attribute arrays\r\nfunction appendAttributeFromIndex(\r\n\tindex,\r\n\tattributes,\r\n\tmatrixWorld,\r\n\tnormalMatrix,\r\n\tattributeInfo,\r\n\tinvert = false,\r\n) {\r\n\r\n\tfor ( const key in attributeInfo ) {\r\n\r\n\t\t// check if the key we're asking for is in the geometry at all\r\n\t\tconst attr = attributes[ key ];\r\n\t\tconst arr = attributeInfo[ key ];\r\n\t\tif ( ! ( key in attributes ) ) {\r\n\r\n\t\t\tthrow new Error( `CSG Operations: Attribute ${ key } no available on geometry.` );\r\n\r\n\t\t}\r\n\r\n\t\t// specially handle the position and normal attributes because they require transforms\r\n\t\t// TODO: handle tangents\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tif ( key === 'position' ) {\r\n\r\n\t\t\t_vec3.fromBufferAttribute( attr, index ).applyMatrix4( matrixWorld );\r\n\t\t\tarr.push( _vec3.x, _vec3.y, _vec3.z );\r\n\r\n\t\t} else if ( key === 'normal' ) {\r\n\r\n\t\t\t_vec3.fromBufferAttribute( attr, index ).applyNormalMatrix( normalMatrix );\r\n\t\t\tif ( invert ) {\r\n\r\n\t\t\t\t_vec3.multiplyScalar( - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarr.push( _vec3.x, _vec3.y, _vec3.z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarr.push( attr.getX( index ) );\r\n\t\t\tif ( itemSize > 1 ) arr.push( attr.getY( index ) );\r\n\t\t\tif ( itemSize > 2 ) arr.push( attr.getZ( index ) );\r\n\t\t\tif ( itemSize > 3 ) arr.push( attr.getW( index ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","import { Triangle, Line3, Vector3, Plane } from 'three';\r\nimport { ExtendedTriangle } from 'three-mesh-bvh';\r\nimport { BACK_SIDE, FRONT_SIDE, COPLANAR } from './operationsUtils.js';\r\n\r\nconst EPSILON = 1e-14;\r\nconst COPLANAR_EPSILON = 1e-7;\r\nconst _edge = new Line3();\r\nconst _foundEdge = new Line3();\r\nconst _vec = new Vector3();\r\nconst _planeNormal = new Vector3();\r\nconst _plane = new Plane();\r\nconst _exTriangle = new ExtendedTriangle();\r\n\r\nexport function isTriDegenerate( tri ) {\r\n\r\n\treturn tri.a.distanceToSquared( tri.b ) < EPSILON ||\r\n\t\ttri.a.distanceToSquared( tri.c ) < EPSILON ||\r\n\t\ttri.b.distanceToSquared( tri.c ) < EPSILON;\r\n\r\n}\r\n\r\n// Triangle with fields used to track whether it falls on the same side of all planes\r\n// being used to clip it. Side is set to \"null\" if it cannot be determined\r\nclass CullableTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tthis.side = null;\r\n\t\tthis.originalSide = null;\r\n\t\tthis.coplanarCount = 0;\r\n\r\n\t}\r\n\r\n\tinit() {\r\n\r\n\t\tthis.side = null;\r\n\t\tthis.originalSide = null;\r\n\t\tthis.coplanarCount = 0;\r\n\r\n\t}\r\n\r\n\tinitFrom( other ) {\r\n\r\n\t\tthis.side = other.side;\r\n\t\tthis.originalSide = other.originalSide;\r\n\t\tthis.coplanarCount = other.coplanarCount;\r\n\r\n\t}\r\n\r\n\tupdateSide( plane, triangle = null, coplanarIndex = - 1 ) {\r\n\r\n\t\tif ( this.originalSide !== null && this.side === null ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// get center and find the side of the plane we're on\r\n\t\t_vec\r\n\t\t\t.copy( this.a )\r\n\t\t\t.add( this.b )\r\n\t\t\t.add( this.c )\r\n\t\t\t.multiplyScalar( 1 / 3 );\r\n\r\n\t\tconst foundSide = plane.distanceToPoint( _vec ) < 0 ? BACK_SIDE : FRONT_SIDE;\r\n\t\tif ( triangle && coplanarIndex !== - 1 ) {\r\n\r\n\t\t\tif ( foundSide === FRONT_SIDE ) {\r\n\r\n\t\t\t\tthis.coplanarCount ++;\r\n\t\t\t\tif ( this.coplanarCount === 3 ) {\r\n\r\n\t\t\t\t\tthis.side = COPLANAR;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.originalSide === null ) {\r\n\r\n\t\t\t\tthis.originalSide = foundSide;\r\n\t\t\t\tthis.side = foundSide;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( foundSide !== this.side ) {\r\n\r\n\t\t\t\tthis.side = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A pool of triangles to avoid unnecessary triangle creation\r\nclass TrianglePool {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis._pool = [];\r\n\t\tthis._index = 0;\r\n\r\n\t}\r\n\r\n\tgetTriangle() {\r\n\r\n\t\tif ( this._index >= this._pool.length ) {\r\n\r\n\t\t\tthis._pool.push( new CullableTriangle() );\r\n\r\n\t\t}\r\n\r\n\t\tconst result = this._pool[ this._index ++ ];\r\n\t\tresult.init();\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis._index = 0;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis._pool.length = 0;\r\n\t\tthis._index = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Utility class for splitting triangles\r\nexport class TriangleSplitter {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.trianglePool = new TrianglePool();\r\n\t\tthis.triangles = [];\r\n\t\tthis.normal = new Vector3();\r\n\r\n\t}\r\n\r\n\t// initialize the class with a triangle\r\n\tinitialize( tri ) {\r\n\r\n\t\tconst { triangles, trianglePool, normal } = this;\r\n\t\ttriangles.length = 0;\r\n\t\ttrianglePool.clear();\r\n\r\n\t\tif ( Array.isArray( tri ) ) {\r\n\r\n\t\t\tfor ( let i = 0, l = tri.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst t = tri[ i ];\r\n\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\tt.getNormal( normal );\r\n\r\n\t\t\t\t} else if ( Math.abs( 1.0 - t.getNormal( _vec ).dot( normal ) ) > EPSILON ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Triangle Splitter: Cannot initialize with triangles that have different normals.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst poolTri = trianglePool.getTriangle();\r\n\t\t\t\tpoolTri.copy( t );\r\n\t\t\t\ttriangles.push( poolTri );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttri.getNormal( normal );\r\n\r\n\t\t\tconst poolTri = trianglePool.getTriangle();\r\n\t\t\tpoolTri.copy( tri );\r\n\t\t\ttriangles.push( poolTri );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Split the current set of triangles by passing a single triangle in. If the triangle is\r\n\t// coplanar it will attempt to split by the triangle edge planes\r\n\tsplitByTriangle( triangle ) {\r\n\r\n\t\tconst { normal, triangles } = this;\r\n\t\ttriangle.getPlane( _plane );\r\n\r\n\t\tif ( Math.abs( 1.0 - Math.abs( _plane.normal.dot( normal ) ) ) < COPLANAR_EPSILON ) {\r\n\r\n\t\t\t// if the triangle is coplanar then split by the edge planes\r\n\t\t\tconst arr = [ triangle.a, triangle.b, triangle.c ];\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\r\n\t\t\t\tconst v0 = arr[ i ];\r\n\t\t\t\tconst v1 = arr[ nexti ];\r\n\r\n\t\t\t\t_vec.subVectors( v1, v0 ).normalize();\r\n\t\t\t\t_planeNormal.crossVectors( normal, _vec );\r\n\t\t\t\t_plane.setFromNormalAndCoplanarPoint( _planeNormal, v0 );\r\n\r\n\t\t\t\tthis.splitByPlane( _plane, triangle, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0, l = triangles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst t = triangles[ i ];\r\n\t\t\t\tt.coplanarCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// otherwise split by the triangle plane\r\n\t\t\tthis.splitByPlane( _plane, triangle );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Split the triangles by the given plan. If a triangle is provided then we ensure we\r\n\t// intersect the triangle before splitting the plane\r\n\tsplitByPlane( plane, triangle = null, coplanarIndex = - 1 ) {\r\n\r\n\t\tconst { triangles, trianglePool } = this;\r\n\r\n\t\t// init our triangle to check for intersection\r\n\t\tlet splittingTriangle = null;\r\n\t\tif ( triangle !== null ) {\r\n\r\n\t\t\tsplittingTriangle = _exTriangle;\r\n\t\t\tsplittingTriangle.copy( triangle );\r\n\t\t\tsplittingTriangle.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t// try to split every triangle in the class\r\n\t\tfor ( let i = 0, l = triangles.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst tri = triangles[ i ];\r\n\t\t\tconst { a, b, c } = tri;\r\n\r\n\t\t\t// skip the triangle if we don't intersect with it\r\n\t\t\tif ( splittingTriangle ) {\r\n\r\n\t\t\t\tif ( ! splittingTriangle.intersectsTriangle( tri, _edge ) || _edge.distance() < 1e-5 ) {\r\n\r\n\t\t\t\t\ttri.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\t\t\t\t\ttri.side = null;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet intersects = 0;\r\n\t\t\tlet vertexSplitEnd = - 1;\r\n\t\t\tlet positiveSide = 0;\r\n\t\t\tlet onPlane = 0;\r\n\t\t\tlet coplanarEdge = false;\r\n\t\t\tconst arr = [ a, b, c ];\r\n\t\t\tfor ( let t = 0; t < 3; t ++ ) {\r\n\r\n\t\t\t\t// get the triangle edge\r\n\t\t\t\tconst tNext = ( t + 1 ) % 3;\r\n\t\t\t\t_edge.start.copy( arr[ t ] );\r\n\t\t\t\t_edge.end.copy( arr[ tNext ] );\r\n\r\n\t\t\t\t// track if the start point sits on the plane or if it's on the positive side of it\r\n\t\t\t\t// so we can use that information to determine whether to split later.\r\n\t\t\t\tconst startDist = plane.distanceToPoint( _edge.start );\r\n\t\t\t\tconst endDist = plane.distanceToPoint( _edge.end );\r\n\t\t\t\tif ( Math.abs( startDist ) < EPSILON ) {\r\n\r\n\t\t\t\t\tonPlane ++;\r\n\r\n\t\t\t\t} else if ( startDist > 0 ) {\r\n\r\n\t\t\t\t\tpositiveSide ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( Math.abs( startDist ) < COPLANAR_EPSILON && Math.abs( endDist ) < COPLANAR_EPSILON ) {\r\n\r\n\t\t\t\t\tcoplanarEdge = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// double check the end point since the \"intersectLine\" function sometimes does not\r\n\t\t\t\t// return it as an intersection (see issue #28)\r\n\t\t\t\tlet didIntersect = ! ! plane.intersectLine( _edge, _vec );\r\n\t\t\t\tif ( ! didIntersect && Math.abs( endDist ) < EPSILON ) {\r\n\r\n\t\t\t\t\t_vec.copy( _edge.end );\r\n\t\t\t\t\tdidIntersect = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// check if we intersect the plane (ignoring the start point so we don't double count)\r\n\t\t\t\tif ( didIntersect && ! ( _vec.distanceTo( _edge.start ) < EPSILON ) ) {\r\n\r\n\t\t\t\t\t// if we intersect at the end point then we track that point as one that we\r\n\t\t\t\t\t// have to split down the middle\r\n\t\t\t\t\tif ( _vec.distanceTo( _edge.end ) < EPSILON ) {\r\n\r\n\t\t\t\t\t\tvertexSplitEnd = t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// track the split edge\r\n\t\t\t\t\tif ( intersects === 0 ) {\r\n\r\n\t\t\t\t\t\t_foundEdge.start.copy( _vec );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_foundEdge.end.copy( _vec );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tintersects ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skip splitting if:\r\n\t\t\t// - we have two points on the plane then the plane intersects the triangle exactly on an edge\r\n\t\t\t// - the plane does not intersect on 2 points\r\n\t\t\t// - the intersection edge is too small\r\n\t\t\tif ( ! coplanarEdge && onPlane < 2 && intersects === 2 && _foundEdge.distance() > COPLANAR_EPSILON ) {\r\n\r\n\t\t\t\tif ( vertexSplitEnd !== - 1 ) {\r\n\r\n\t\t\t\t\tvertexSplitEnd = ( vertexSplitEnd + 1 ) % 3;\r\n\r\n\t\t\t\t\t// we're splitting along a vertex\r\n\t\t\t\t\tlet otherVert1 = 0;\r\n\t\t\t\t\tif ( otherVert1 === vertexSplitEnd ) otherVert1 = ( otherVert1 + 1 ) % 3;\r\n\r\n\t\t\t\t\tlet otherVert2 = otherVert1 + 1;\r\n\t\t\t\t\tif ( otherVert2 === vertexSplitEnd ) otherVert2 = ( otherVert2 + 1 ) % 3;\r\n\r\n\t\t\t\t\tconst nextTri = trianglePool.getTriangle();\r\n\t\t\t\t\tnextTri.a.copy( arr[ otherVert2 ] );\r\n\t\t\t\t\tnextTri.b.copy( _foundEdge.end );\r\n\t\t\t\t\tnextTri.c.copy( _foundEdge.start );\r\n\r\n\t\t\t\t\tif ( ! isTriDegenerate( nextTri ) ) {\r\n\r\n\t\t\t\t\t\ttriangles.push( nextTri );\r\n\t\t\t\t\t\tnextTri.initFrom( tri );\r\n\t\t\t\t\t\tnextTri.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttri.a.copy( arr[ otherVert1 ] );\r\n\t\t\t\t\ttri.b.copy( _foundEdge.start );\r\n\t\t\t\t\ttri.c.copy( _foundEdge.end );\r\n\r\n\t\t\t\t\tif ( isTriDegenerate( tri ) ) {\r\n\r\n\t\t\t\t\t\ttriangles.splice( i, 1 );\r\n\t\t\t\t\t\ti --;\r\n\t\t\t\t\t\tl --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttri.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// we're splitting with a quad and a triangle\r\n\t\t\t\t\tconst singleVert = arr.findIndex( v => {\r\n\r\n\t\t\t\t\t\tif ( positiveSide >= 2 ) {\r\n\r\n\t\t\t\t\t\t\treturn plane.distanceToPoint( v ) < 0;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\treturn plane.distanceToPoint( v ) > 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif ( singleVert === 0 ) {\r\n\r\n\t\t\t\t\t\tlet tmp = _foundEdge.start;\r\n\t\t\t\t\t\t_foundEdge.start = _foundEdge.end;\r\n\t\t\t\t\t\t_foundEdge.end = tmp;\r\n\r\n\t\t\t\t\t} else if ( singleVert === - 1 ) {\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst nextVert1 = ( singleVert + 1 ) % 3;\r\n\t\t\t\t\tconst nextVert2 = ( singleVert + 2 ) % 3;\r\n\r\n\t\t\t\t\tconst nextTri1 = trianglePool.getTriangle();\r\n\t\t\t\t\tconst nextTri2 = trianglePool.getTriangle();\r\n\r\n\t\t\t\t\t// choose the triangle that has the larger areas (shortest split distance)\r\n\t\t\t\t\tif ( arr[ nextVert1 ].distanceToSquared( _foundEdge.start ) < arr[ nextVert2 ].distanceToSquared( _foundEdge.end ) ) {\r\n\r\n\t\t\t\t\t\tnextTri1.a.copy( arr[ nextVert1 ] );\r\n\t\t\t\t\t\tnextTri1.b.copy( _foundEdge.start );\r\n\t\t\t\t\t\tnextTri1.c.copy( _foundEdge.end );\r\n\r\n\t\t\t\t\t\tnextTri2.a.copy( arr[ nextVert1 ] );\r\n\t\t\t\t\t\tnextTri2.b.copy( arr[ nextVert2 ] );\r\n\t\t\t\t\t\tnextTri2.c.copy( _foundEdge.start );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tnextTri1.a.copy( arr[ nextVert2 ] );\r\n\t\t\t\t\t\tnextTri1.b.copy( _foundEdge.start );\r\n\t\t\t\t\t\tnextTri1.c.copy( _foundEdge.end );\r\n\r\n\t\t\t\t\t\tnextTri2.a.copy( arr[ nextVert1 ] );\r\n\t\t\t\t\t\tnextTri2.b.copy( arr[ nextVert2 ] );\r\n\t\t\t\t\t\tnextTri2.c.copy( _foundEdge.end );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttri.a.copy( arr[ singleVert ] );\r\n\t\t\t\t\ttri.b.copy( _foundEdge.end );\r\n\t\t\t\t\ttri.c.copy( _foundEdge.start );\r\n\r\n\t\t\t\t\t// don't add degenerate triangles to the list\r\n\t\t\t\t\tif ( ! isTriDegenerate( nextTri1 ) ) {\r\n\r\n\t\t\t\t\t\ttriangles.push( nextTri1 );\r\n\t\t\t\t\t\tnextTri1.initFrom( tri );\r\n\t\t\t\t\t\tnextTri1.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! isTriDegenerate( nextTri2 ) ) {\r\n\r\n\t\t\t\t\t\ttriangles.push( nextTri2 );\r\n\t\t\t\t\t\tnextTri2.initFrom( tri );\r\n\t\t\t\t\t\tnextTri2.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( isTriDegenerate( tri ) ) {\r\n\r\n\t\t\t\t\t\ttriangles.splice( i, 1 );\r\n\t\t\t\t\t\ti --;\r\n\t\t\t\t\t\tl --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttri.updateSide( plane, splittingTriangle, coplanarIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( intersects === 3 ) {\r\n\r\n\t\t\t\tconsole.warn( 'TriangleClipper: Coplanar clip not handled' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.triangles.length = 0;\r\n\r\n\t}\r\n\r\n}\r\n","import { areSharedArrayBuffersSupported } from './utils.js';\r\n\r\n// Make a new array wrapper class that more easily affords expansion when reaching it's max capacity\r\nexport class TypeBackedArray {\r\n\r\n\tconstructor( type, initialSize = 500 ) {\r\n\r\n\t\tconst bufferType = areSharedArrayBuffersSupported() ? SharedArrayBuffer : ArrayBuffer;\r\n\r\n\t\tthis.expansionFactor = 1.5;\r\n\t\tthis.type = type;\r\n\t\tthis.array = new type( new bufferType( initialSize * type.BYTES_PER_ELEMENT ) );\r\n\t\tthis.length = 0;\r\n\r\n\t}\r\n\r\n\texpand( size = null ) {\r\n\r\n\t\tconst { type, array, expansionFactor } = this;\r\n\r\n\t\tif ( size === null ) {\r\n\r\n\t\t\tsize = ~ ~ ( array.length * expansionFactor );\r\n\r\n\t\t}\r\n\r\n\t\tconst newArray = new type( size );\r\n\t\tnewArray.set( array, 0 );\r\n\t\tthis.array = newArray;\r\n\r\n\t}\r\n\r\n\tpush( ...args ) {\r\n\r\n\t\tlet { array, length } = this;\r\n\t\tif ( length + args.length > array.length ) {\r\n\r\n\t\t\tthis.expand();\r\n\t\t\tarray = this.array;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, l = args.length; i < l; i ++ ) {\r\n\r\n\t\t\tarray[ length + i ] = args[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.length += args.length;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis.length = 0;\r\n\r\n\t}\r\n\r\n}\r\n","import { TypeBackedArray } from './TypeBackedArray.js';\r\n\r\n// utility class for for tracking attribute data in type-backed arrays\r\nexport class TypedAttributeData {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.groupAttributes = [ {} ];\r\n\t\tthis.groupCount = 0;\r\n\r\n\t}\r\n\r\n\tgetType( name ) {\r\n\r\n\t\treturn this.groupAttributes[ 0 ][ name ].type;\r\n\r\n\t}\r\n\r\n\tgetTotalLength( name ) {\r\n\r\n\t\tconst { groupCount, groupAttributes } = this;\r\n\r\n\t\tlet length = 0;\r\n\t\tfor ( let i = 0; i < groupCount; i ++ ) {\r\n\r\n\t\t\tconst attrSet = groupAttributes[ i ];\r\n\t\t\tlength += attrSet[ name ].length;\r\n\r\n\t\t}\r\n\r\n\t\treturn length;\r\n\r\n\t}\r\n\r\n\tgetGroupSet( index = 0 ) {\r\n\r\n\t\t// throw an error if we've never\r\n\t\tconst { groupAttributes } = this;\r\n\t\tif ( groupAttributes[ index ] ) {\r\n\r\n\t\t\tthis.groupCount = Math.max( this.groupCount, index + 1 );\r\n\t\t\treturn groupAttributes[ index ];\r\n\r\n\t\t}\r\n\r\n\t\t// add any new group sets required\r\n\t\tconst rootAttrSet = groupAttributes[ 0 ];\r\n\t\tthis.groupCount = Math.max( this.groupCount, index + 1 );\r\n\t\twhile ( index >= groupAttributes.length ) {\r\n\r\n\t\t\tconst newAttrSet = {};\r\n\t\t\tgroupAttributes.push( newAttrSet );\r\n\t\t\tfor ( const key in rootAttrSet ) {\r\n\r\n\t\t\t\tnewAttrSet[ key ] = new TypeBackedArray( rootAttrSet[ key ].type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn groupAttributes[ index ];\r\n\r\n\t}\r\n\r\n\tgetGroupArray( name, index = 0 ) {\r\n\r\n\t\t// throw an error if we've never\r\n\t\tconst { groupAttributes } = this;\r\n\t\tconst rootAttrSet = groupAttributes[ 0 ];\r\n\t\tconst referenceAttr = rootAttrSet[ name ];\r\n\t\tif ( ! referenceAttr ) {\r\n\r\n\t\t\tthrow new Error( `TypedAttributeData: Attribute with \"${ name }\" has not been initialized` );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.getGroupSet( index )[ name ];\r\n\r\n\t}\r\n\r\n\t// initializes an attribute array with the given name, type, and size\r\n\tinitializeArray( name, type ) {\r\n\r\n\t\tconst { groupAttributes } = this;\r\n\t\tconst rootSet = groupAttributes[ 0 ];\r\n\t\tconst referenceAttr = rootSet[ name ];\r\n\t\tif ( referenceAttr ) {\r\n\r\n\t\t\tif ( referenceAttr.type !== type ) {\r\n\r\n\t\t\t\tthrow new Error( `TypedAttributeData: Array ${ name } already initialized with a different type.` );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0, l = groupAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tgroupAttributes[ i ][ name ] = new TypeBackedArray( type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis.groupCount = 0;\r\n\r\n\t\tconst { groupAttributes } = this;\r\n\t\tgroupAttributes.forEach( attrSet => {\r\n\r\n\t\t\tfor ( const key in attrSet ) {\r\n\r\n\t\t\t\tattrSet[ key ].clear();\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tdelete( key ) {\r\n\r\n\t\tthis.groupAttributes.forEach( attrSet => {\r\n\r\n\t\t\tdelete attrSet[ key ];\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.groupAttributes = [];\r\n\r\n\t}\r\n\r\n}\r\n","import { Triangle } from 'three';\r\n\r\nclass TriangleIntersectData {\r\n\r\n\tconstructor( tri ) {\r\n\r\n\t\tthis.triangle = new Triangle().copy( tri );\r\n\t\tthis.intersects = {};\r\n\r\n\t}\r\n\r\n\taddTriangle( index, tri ) {\r\n\r\n\t\tthis.intersects[ index ] = new Triangle().copy( tri );\r\n\r\n\t}\r\n\r\n\tgetIntersectArray() {\r\n\r\n\t\tconst array = [];\r\n\t\tconst { intersects } = this;\r\n\t\tfor ( const key in intersects ) {\r\n\r\n\t\t\tarray.push( intersects[ key ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass TriangleIntersectionSets {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.data = {};\r\n\r\n\t}\r\n\r\n\taddTriangleIntersection( ia, triA, ib, triB ) {\r\n\r\n\t\tconst { data } = this;\r\n\t\tif ( ! data[ ia ] ) {\r\n\r\n\t\t\tdata[ ia ] = new TriangleIntersectData( triA );\r\n\r\n\t\t}\r\n\r\n\t\tdata[ ia ].addTriangle( ib, triB );\r\n\r\n\t}\r\n\r\n\tgetTrianglesAsArray( id = null ) {\r\n\r\n\t\tconst { data } = this;\r\n\t\tconst arr = [];\r\n\r\n\t\tif ( id !== null ) {\r\n\r\n\t\t\tif ( id in data ) {\r\n\r\n\t\t\t\tarr.push( data[ id ].triangle );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( const key in data ) {\r\n\r\n\t\t\t\tarr.push( data[ key ].triangle );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\r\n\t}\r\n\r\n\tgetTriangleIndices() {\r\n\r\n\t\treturn Object.keys( this.data ).map( i => parseInt( i ) );\r\n\r\n\t}\r\n\r\n\tgetIntersectionIndices( id ) {\r\n\r\n\t\tconst { data } = this;\r\n\t\tif ( ! data[ id ] ) {\r\n\r\n\t\t\treturn [];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn Object.keys( data[ id ].intersects ).map( i => parseInt( i ) );\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetIntersectionsAsArray( id = null, id2 = null ) {\r\n\r\n\t\tconst { data } = this;\r\n\t\tconst triSet = new Set();\r\n\t\tconst arr = [];\r\n\r\n\t\tconst addTriangles = key => {\r\n\r\n\t\t\tif ( ! data[ key ] ) return;\r\n\r\n\t\t\tif ( id2 !== null ) {\r\n\r\n\t\t\t\tif ( data[ key ].intersects[ id2 ] ) {\r\n\r\n\t\t\t\t\tarr.push( data[ key ].intersects[ id2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst intersects = data[ key ].intersects;\r\n\t\t\t\tfor ( const key2 in intersects ) {\r\n\r\n\t\t\t\t\tif ( ! triSet.has( key2 ) ) {\r\n\r\n\t\t\t\t\t\ttriSet.add( key2 );\r\n\t\t\t\t\t\tarr.push( intersects[ key2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tif ( id !== null ) {\r\n\r\n\t\t\taddTriangles( id );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( const key in data ) {\r\n\r\n\t\t\t\taddTriangles( key );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.data = {};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class OperationDebugData {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.enabled = false;\r\n\t\tthis.triangleIntersectsA = new TriangleIntersectionSets();\r\n\t\tthis.triangleIntersectsB = new TriangleIntersectionSets();\r\n\t\tthis.intersectionEdges = [];\r\n\r\n\t}\r\n\r\n\taddIntersectingTriangles( ia, triA, ib, triB ) {\r\n\r\n\t\tconst { triangleIntersectsA, triangleIntersectsB } = this;\r\n\t\ttriangleIntersectsA.addTriangleIntersection( ia, triA, ib, triB );\r\n\t\ttriangleIntersectsB.addTriangleIntersection( ib, triB, ia, triA );\r\n\r\n\t}\r\n\r\n\taddEdge( edge ) {\r\n\r\n\t\tthis.intersectionEdges.push( edge.clone() );\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.triangleIntersectsA.reset();\r\n\t\tthis.triangleIntersectsB.reset();\r\n\t\tthis.intersectionEdges = [];\r\n\r\n\t}\r\n\r\n}\r\n","import { Matrix4, Matrix3, Triangle } from 'three';\r\nimport {\r\n\tgetHitSide,\r\n\tcollectIntersectingTriangles,\r\n\tappendAttributeFromTriangle,\r\n\tappendAttributesFromIndices,\r\n\tgetOperationAction,\r\n\tSKIP_TRI, ADD_TRI, INVERT_TRI,\r\n} from './operationsUtils.js';\r\n\r\nconst _matrix = new Matrix4();\r\nconst _normalMatrix = new Matrix3();\r\nconst _triA = new Triangle();\r\nconst _triB = new Triangle();\r\nconst _tri = new Triangle();\r\nconst _barycoordTri = new Triangle();\r\n\r\nfunction getFirstIdFromSet( set ) {\r\n\r\n\tfor ( const id of set ) return id;\r\n\r\n}\r\n\r\n// runs the given operation against a and b using the splitter and appending data to the\r\n// typedAttributeData object.\r\nexport function performOperation( a, b, operation, splitter, typedAttributeData, options ) {\r\n\r\n\tconst { useGroups = true } = options;\r\n\tconst { aIntersections, bIntersections } = collectIntersectingTriangles( a, b );\r\n\r\n\tconst resultGroups = [];\r\n\tlet resultMaterials = null;\r\n\r\n\tlet groupOffset;\r\n\tgroupOffset = useGroups ? 0 : - 1;\r\n\tperformWholeTriangleOperations( a, b, aIntersections, operation, false, typedAttributeData, groupOffset );\r\n\tperformSplitTriangleOperations( a, b, aIntersections, operation, false, splitter, typedAttributeData, groupOffset );\r\n\r\n\tgroupOffset = useGroups ? a.geometry.groups.length || 1 : - 1;\r\n\tperformWholeTriangleOperations( b, a, bIntersections, operation, true, typedAttributeData, groupOffset );\r\n\tperformSplitTriangleOperations( b, a, bIntersections, operation, true, splitter, typedAttributeData, groupOffset );\r\n\r\n\treturn {\r\n\t\tgroups: resultGroups,\r\n\t\tmaterials: resultMaterials\r\n\t};\r\n\r\n}\r\n\r\n// perform triangle splitting and CSG operations on the set of split triangles\r\nfunction performSplitTriangleOperations( a, b, intersectionMap, operation, invert, splitter, attributeInfo, groupOffset = 0 ) {\r\n\r\n\t// transforms into the local frame of matrix b\r\n\t_matrix\r\n\t\t.copy( b.matrixWorld )\r\n\t\t.invert()\r\n\t\t.multiply( a.matrixWorld );\r\n\r\n\t_normalMatrix.getNormalMatrix( a.matrixWorld );\r\n\r\n\tconst groupIndices = a.geometry.groupIndices;\r\n\tconst aIndex = a.geometry.index;\r\n\tconst aPosition = a.geometry.attributes.position;\r\n\r\n\tconst bBVH = b.geometry.boundsTree;\r\n\tconst bIndex = b.geometry.index;\r\n\tconst bPosition = b.geometry.attributes.position;\r\n\tconst splitIds = intersectionMap.ids;\r\n\tconst intersectionSet = intersectionMap.intersectionSet;\r\n\r\n\t// iterate over all split triangle indices\r\n\tfor ( let i = 0, l = splitIds.length; i < l; i ++ ) {\r\n\r\n\t\tconst ia = splitIds[ i ];\r\n\t\tconst groupIndex = groupOffset === - 1 ? 0 : groupIndices[ ia ] + groupOffset;\r\n\t\tconst attrSet = attributeInfo.getGroupSet( groupIndex );\r\n\r\n\t\t// get the triangle in the geometry B local frame\r\n\t\tconst ia3 = 3 * ia;\r\n\t\tconst ia0 = aIndex.getX( ia3 + 0 );\r\n\t\tconst ia1 = aIndex.getX( ia3 + 1 );\r\n\t\tconst ia2 = aIndex.getX( ia3 + 2 );\r\n\t\t_triA.a.fromBufferAttribute( aPosition, ia0 ).applyMatrix4( _matrix );\r\n\t\t_triA.b.fromBufferAttribute( aPosition, ia1 ).applyMatrix4( _matrix );\r\n\t\t_triA.c.fromBufferAttribute( aPosition, ia2 ).applyMatrix4( _matrix );\r\n\r\n\t\t// initialize the splitter with the triangle from geometry A\r\n\t\tsplitter.initialize( _triA );\r\n\r\n\t\t// split the triangle with the intersecting triangles from B\r\n\t\tconst intersectingIndices = intersectionSet[ ia ];\r\n\t\tfor ( let ib = 0, l = intersectingIndices.length; ib < l; ib ++ ) {\r\n\r\n\t\t\tconst ib3 = 3 * intersectingIndices[ ib ];\r\n\t\t\tconst ib0 = bIndex.getX( ib3 + 0 );\r\n\t\t\tconst ib1 = bIndex.getX( ib3 + 1 );\r\n\t\t\tconst ib2 = bIndex.getX( ib3 + 2 );\r\n\t\t\t_triB.a.fromBufferAttribute( bPosition, ib0 );\r\n\t\t\t_triB.b.fromBufferAttribute( bPosition, ib1 );\r\n\t\t\t_triB.c.fromBufferAttribute( bPosition, ib2 );\r\n\t\t\tsplitter.splitByTriangle( _triB );\r\n\r\n\t\t}\r\n\r\n\t\t// for all triangles in the split result\r\n\t\tconst triangles = splitter.triangles;\r\n\t\tfor ( let ib = 0, l = triangles.length; ib < l; ib ++ ) {\r\n\r\n\t\t\t// get the barycentric coordinates of the clipped triangle to add\r\n\t\t\tconst clippedTri = triangles[ ib ];\r\n\r\n\t\t\t// try to use the side derived from the clipping but if it turns out to be\r\n\t\t\t// uncertain then fall back to the raycasting approach\r\n\t\t\tconst hitSide = getHitSide( clippedTri, bBVH );\r\n\t\t\t// let hitSide = clippedTri.side;\r\n\t\t\t// if ( true || hitSide === null ) {\r\n\r\n\t\t\t// \thitSide = getHitSide( clippedTri, bBVH );\r\n\r\n\t\t\t// }\r\n\r\n\t\t\tconst action = getOperationAction( operation, hitSide, invert );\r\n\t\t\tif ( action !== SKIP_TRI ) {\r\n\r\n\t\t\t\t_triA.getBarycoord( clippedTri.a, _barycoordTri.a );\r\n\t\t\t\t_triA.getBarycoord( clippedTri.b, _barycoordTri.b );\r\n\t\t\t\t_triA.getBarycoord( clippedTri.c, _barycoordTri.c );\r\n\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\tcase ADD_TRI:\r\n\t\t\t\t\t\tappendAttributeFromTriangle( ia, _barycoordTri, a.geometry, a.matrixWorld, _normalMatrix, attrSet );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase INVERT_TRI:\r\n\t\t\t\t\t\tappendAttributeFromTriangle( ia, _barycoordTri, a.geometry, a.matrixWorld, _normalMatrix, attrSet, true );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitIds.length;\r\n\r\n}\r\n\r\n// perform CSG operations on the set of whole triangles using a half edge structure\r\n// at the moment this isn't always faster due to overhead of building the half edge structure\r\n// and degraded connectivity due to split triangles.\r\n\r\nfunction performWholeTriangleOperations( a, b, splitTriSet, operation, invert, attributeInfo, groupOffset = 0 ) {\r\n\r\n\t// matrix for transforming into the local frame of geometry b\r\n\t_matrix\r\n\t\t.copy( b.matrixWorld )\r\n\t\t.invert()\r\n\t\t.multiply( a.matrixWorld );\r\n\r\n\t_normalMatrix.getNormalMatrix( a.matrixWorld );\r\n\r\n\tconst bBVH = b.geometry.boundsTree;\r\n\tconst groupIndices = a.geometry.groupIndices;\r\n\tconst aIndex = a.geometry.index;\r\n\tconst aAttributes = a.geometry.attributes;\r\n\tconst aPosition = aAttributes.position;\r\n\r\n\tconst stack = [];\r\n\tconst halfEdges = a.geometry.halfEdges;\r\n\tconst traverseSet = new Set();\r\n\tfor ( let i = 0, l = aIndex.count / 3; i < l; i ++ ) {\r\n\r\n\t\tif ( ! ( i in splitTriSet.intersectionSet ) ) {\r\n\r\n\t\t\ttraverseSet.add( i );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\twhile ( traverseSet.size > 0 ) {\r\n\r\n\t\tconst id = getFirstIdFromSet( traverseSet );\r\n\t\ttraverseSet.delete( id );\r\n\r\n\t\tstack.push( id );\r\n\r\n\t\t// get the vertex indices\r\n\t\tconst i3 = 3 * id;\r\n\t\tconst i0 = aIndex.getX( i3 + 0 );\r\n\t\tconst i1 = aIndex.getX( i3 + 1 );\r\n\t\tconst i2 = aIndex.getX( i3 + 2 );\r\n\r\n\t\t// get the vertex position in the frame of geometry b so we can\r\n\t\t// perform hit testing\r\n\t\t_tri.a.fromBufferAttribute( aPosition, i0 ).applyMatrix4( _matrix );\r\n\t\t_tri.b.fromBufferAttribute( aPosition, i1 ).applyMatrix4( _matrix );\r\n\t\t_tri.c.fromBufferAttribute( aPosition, i2 ).applyMatrix4( _matrix );\r\n\r\n\t\t// get the side and decide if we need to cull the triangle based on the operation\r\n\t\tconst hitSide = getHitSide( _tri, bBVH );\r\n\t\tconst action = getOperationAction( operation, hitSide, invert );\r\n\t\twhile ( stack.length > 0 ) {\r\n\r\n\t\t\tconst currId = stack.pop();\r\n\t\t\tconst groupIndex = groupOffset === - 1 ? 0 : groupIndices[ currId ] + groupOffset;\r\n\t\t\tconst attrSet = attributeInfo.getGroupSet( groupIndex );\r\n\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst sid = halfEdges.getSiblingTriangleIndex( currId, i );\r\n\t\t\t\tif ( sid !== - 1 && traverseSet.has( sid ) ) {\r\n\r\n\t\t\t\t\tstack.push( sid );\r\n\t\t\t\t\ttraverseSet.delete( sid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst i3 = 3 * currId;\r\n\t\t\tconst i0 = aIndex.getX( i3 + 0 );\r\n\t\t\tconst i1 = aIndex.getX( i3 + 1 );\r\n\t\t\tconst i2 = aIndex.getX( i3 + 2 );\r\n\r\n\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\tcase ADD_TRI:\r\n\t\t\t\t\tappendAttributesFromIndices( i0, i1, i2, aAttributes, a.matrixWorld, _normalMatrix, attrSet );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase INVERT_TRI:\r\n\t\t\t\t\tappendAttributesFromIndices( i2, i1, i0, aAttributes, a.matrixWorld, _normalMatrix, attrSet, invert );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n","import { BufferAttribute } from 'three';\r\nimport { TriangleSplitter } from './TriangleSplitter.js';\r\nimport { TypedAttributeData } from './TypedAttributeData.js';\r\nimport { OperationDebugData } from './OperationDebugData.js';\r\nimport { performOperation } from './operations.js';\r\nimport { setDebugContext } from './operationsUtils.js';\r\nimport { Brush } from './Brush.js';\r\n\r\n// applies the given set of attribute data to the provided geometry. If the attributes are\r\n// not large enough to hold the new set of data then new attributes will be created. Otherwise\r\n// the existing attributes will be used and draw range updated to accommodate the new size.\r\nfunction applyToGeometry( geometry, referenceGeometry, groups, attributeInfo ) {\r\n\r\n\tlet needsDisposal = false;\r\n\tlet drawRange = - 1;\r\n\tconst groupCount = attributeInfo.groupCount;\r\n\r\n\t// set the data\r\n\tconst attributes = geometry.attributes;\r\n\tconst rootAttrSet = attributeInfo.groupAttributes[ 0 ];\r\n\tfor ( const key in rootAttrSet ) {\r\n\r\n\t\tconst requiredLength = attributeInfo.getTotalLength( key, groupCount );\r\n\t\tconst type = rootAttrSet[ key ].type;\r\n\t\tlet attr = attributes[ key ];\r\n\t\tif ( ! attr || attr.array.length < requiredLength ) {\r\n\r\n\t\t\t// create the attribute if it doesn't exist yet\r\n\t\t\tconst refAttr = referenceGeometry.attributes[ key ];\r\n\t\t\tattr = new BufferAttribute( new type( requiredLength ), refAttr.itemSize, refAttr.normalized );\r\n\t\t\tgeometry.setAttribute( key, attr );\r\n\t\t\tneedsDisposal = true;\r\n\r\n\t\t}\r\n\r\n\t\tlet offset = 0;\r\n\t\tfor ( let i = 0; i < groupCount; i ++ ) {\r\n\r\n\t\t\tconst { array, type, length } = attributeInfo.groupAttributes[ i ][ key ];\r\n\t\t\tconst trimmedArray = new type( array.buffer, 0, length );\r\n\t\t\tattr.array.set( trimmedArray, offset );\r\n\t\t\toffset += trimmedArray.length;\r\n\r\n\t\t}\r\n\r\n\t\tattr.needsUpdate = true;\r\n\t\tdrawRange = requiredLength / attr.itemSize;\r\n\r\n\t}\r\n\r\n\t// update the draw range\r\n\tgeometry.setDrawRange( 0, drawRange );\r\n\tgeometry.clearGroups();\r\n\r\n\tlet groupOffset = 0;\r\n\tfor ( let i = 0; i < groupCount; i ++ ) {\r\n\r\n\t\tconst posCount = attributeInfo.getGroupArray( 'position', i ).length / 3;\r\n\t\tif ( posCount !== 0 ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tgeometry.addGroup( groupOffset, posCount, group.materialIndex );\r\n\t\t\tgroupOffset += posCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// remove or update the index appropriately\r\n\tif ( geometry.index ) {\r\n\r\n\t\tconst indexArray = geometry.index.array;\r\n\t\tif ( indexArray.length < drawRange ) {\r\n\r\n\t\t\tgeometry.index = null;\r\n\t\t\tneedsDisposal = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0, l = indexArray.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindexArray[ i ] = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// remove the bounds tree if it exists because its now out of date\r\n\t// TODO: can we have this dispose in the same way that a brush does?\r\n\tgeometry.boundsTree = null;\r\n\r\n\tif ( needsDisposal ) {\r\n\r\n\t\tgeometry.dispose();\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n}\r\n\r\nfunction getMaterialList( groups, materials ) {\r\n\r\n\tlet result = materials;\r\n\tif ( ! Array.isArray( materials ) ) {\r\n\r\n\t\tresult = [];\r\n\t\tgroups.forEach( g => {\r\n\r\n\t\t\tresult[ g.materialIndex ] = materials;\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n// Utility class for performing CSG operations\r\nexport class Evaluator {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.triangleSplitter = new TriangleSplitter();\r\n\t\tthis.attributeData = new TypedAttributeData();\r\n\t\tthis.attributes = [ 'position', 'uv', 'normal' ];\r\n\t\tthis.useGroups = true;\r\n\t\tthis.debug = new OperationDebugData();\r\n\r\n\t}\r\n\r\n\tevaluate( a, b, operation, targetBrush = new Brush() ) {\r\n\r\n\t\ta.prepareGeometry();\r\n\t\tb.prepareGeometry();\r\n\r\n\t\tconst { triangleSplitter, attributeData, attributes, useGroups, debug } = this;\r\n\t\tconst targetGeometry = targetBrush.geometry;\r\n\t\tconst aAttributes = a.geometry.attributes;\r\n\t\tfor ( let i = 0, l = attributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst key = attributes[ i ];\r\n\t\t\tconst attr = aAttributes[ key ];\r\n\t\t\tattributeData.initializeArray( key, attr.array.constructor );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const key in attributeData.attributes ) {\r\n\r\n\t\t\tif ( ! attributes.includes( key ) ) {\r\n\r\n\t\t\t\tattributeData.delete( key );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const key in targetGeometry.attributes ) {\r\n\r\n\t\t\tif ( ! attributes.includes( key ) ) {\r\n\r\n\t\t\t\ttargetGeometry.deleteAttribute( key );\r\n\t\t\t\ttargetGeometry.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tattributeData.clear();\r\n\r\n\t\tif ( debug.enabled ) {\r\n\r\n\t\t\tdebug.reset();\r\n\t\t\tsetDebugContext( debug );\r\n\r\n\t\t}\r\n\r\n\t\tperformOperation( a, b, operation, triangleSplitter, attributeData, { useGroups } );\r\n\r\n\t\tif ( debug.enabled ) {\r\n\r\n\t\t\tsetDebugContext( null );\r\n\r\n\t\t}\r\n\r\n\t\t// structure the groups appropriately\r\n\t\tconst aGroups = ! useGroups || a.geometry.groups.length === 0 ?\r\n\t\t\t[ { start: 0, count: Infinity, materialIndex: 0 } ] :\r\n\t\t\ta.geometry.groups.map( group => ( { ...group } ) );\r\n\r\n\t\tconst bGroups = ! useGroups || b.geometry.groups.length === 0 ?\r\n\t\t\t[ { start: 0, count: Infinity, materialIndex: 0 } ] :\r\n\t\t\tb.geometry.groups.map( group => ( { ...group } ) );\r\n\r\n\t\t// get the materials\r\n\t\tconst aMaterials = getMaterialList( aGroups, a.material );\r\n\t\tconst bMaterials = getMaterialList( bGroups, b.material );\r\n\r\n\t\t// adjust the material index\r\n\t\tbGroups.forEach( g => {\r\n\r\n\t\t\tg.materialIndex += aMaterials.length;\r\n\r\n\t\t} );\r\n\r\n\t\t// apply groups and attribute data to the geometry\r\n\t\tapplyToGeometry( targetGeometry, a.geometry, [ ...aGroups, ...bGroups ], attributeData );\r\n\r\n\t\t// generate the minimum set of materials needed for the list of groups and adjust the groups\r\n\t\t// if they're needed\r\n\t\tconst groups = targetGeometry.groups;\r\n\t\tif ( useGroups ) {\r\n\r\n\t\t\tconst materialMap = new Map();\r\n\t\t\tconst allMaterials = [ ...aMaterials, ...bMaterials ];\r\n\r\n\t\t\t// create a map from old to new index and remove materials that aren't used\r\n\t\t\tlet newIndex = 0;\r\n\t\t\tfor ( let i = 0, l = allMaterials.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst foundGroup = Boolean( groups.find( group => group.materialIndex === i ) );\r\n\t\t\t\tif ( ! foundGroup ) {\r\n\r\n\t\t\t\t\tallMaterials[ i ] = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterialMap.set( i, newIndex );\r\n\t\t\t\t\tnewIndex ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// adjust the groups indices\r\n\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\tgroup.materialIndex = materialMap.get( group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetBrush.material = allMaterials.filter( material => material );\r\n\r\n\t\t}\r\n\r\n\t\treturn targetBrush;\r\n\r\n\t}\r\n\r\n\tevaluateHierarchy( root, target = new Brush() ) {\r\n\r\n\t\troot.updateMatrixWorld( true );\r\n\r\n\t\tconst flatTraverse = ( obj, cb ) => {\r\n\r\n\t\t\tconst children = obj.children;\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst child = children[ i ];\r\n\t\t\t\tif ( child.isOperationGroup ) {\r\n\r\n\t\t\t\t\tflatTraverse( child, cb );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcb( child );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t\tconst traverse = ( brush ) => {\r\n\r\n\t\t\tconst children = brush.children;\r\n\t\t\tlet didChange = false;\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst child = children[ i ];\r\n\t\t\t\tdidChange = traverse( child ) || didChange;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isDirty = brush.isDirty();\r\n\t\t\tif ( isDirty ) {\r\n\r\n\t\t\t\tbrush.markUpdated();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( didChange && ! brush.isOperationGroup ) {\r\n\r\n\t\t\t\tlet result;\r\n\t\t\t\tflatTraverse( brush, child => {\r\n\r\n\t\t\t\t\tif ( ! result ) {\r\n\r\n\t\t\t\t\t\tresult = this.evaluate( brush, child, child.operation );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tresult = this.evaluate( result, child, child.operation );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tbrush._cachedGeometry = result.geometry;\r\n\t\t\t\tbrush._cachedMaterials = result.material;\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn didChange || isDirty;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\ttraverse( root );\r\n\r\n\t\ttarget.geometry = root._cachedGeometry;\r\n\t\ttarget.material = root._cachedMaterials;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.triangleSplitter.reset();\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferGeometry } from 'three';\r\nimport { Brush } from './Brush.js';\r\nimport { ADDITION } from './constants.js';\r\n\r\nexport class Operation extends Brush {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isOperation = true;\r\n\t\tthis.operation = ADDITION;\r\n\r\n\t\tthis._cachedGeometry = new BufferGeometry();\r\n\t\tthis._cachedMaterials = null;\r\n\t\tthis._previousOperation = null;\r\n\r\n\t}\r\n\r\n\tmarkUpdated() {\r\n\r\n\t\tsuper.markUpdated();\r\n\t\tthis._previousOperation = this.operation;\r\n\r\n\t}\r\n\r\n\tisDirty() {\r\n\r\n\t\treturn this.operation !== this._previousOperation || super.isDirty();\r\n\r\n\t}\r\n\r\n\tinsertBefore( brush ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\t\tconst index = parent.children.indexOf( this );\r\n\t\tparent.children.splice( index, 0, brush );\r\n\r\n\t\t// TODO: throw event\r\n\r\n\t}\r\n\r\n\tinsertAfter( brush ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\t\tconst index = parent.children.indexOf( this );\r\n\t\tparent.children.splice( index + 1, 0, brush );\r\n\r\n\t\t// TODO: throw event\r\n\r\n\t}\r\n\r\n}\r\n","import { Group, Matrix4 } from 'three';\r\n\r\nexport class OperationGroup extends Group {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis.isOperationGroup = true;\r\n\t\tthis._previousMatrix = new Matrix4();\r\n\r\n\t}\r\n\r\n\tmarkUpdated() {\r\n\r\n\t\tthis._previousMatrix.copy( this.matrix );\r\n\r\n\t}\r\n\r\n\tisDirty() {\r\n\r\n\t\tconst { matrix, _previousMatrix } = this;\r\n\t\tconst el1 = matrix.elements;\r\n\t\tconst el2 = _previousMatrix.elements;\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( el1[ i ] !== el2[ i ] ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n}\r\n","import { Color } from 'three';\r\n\r\nfunction addWorldPosition( shader ) {\r\n\r\n\tif ( /varying\\s+vec3\\s+wPosition/.test( shader.vertexShader ) ) return;\r\n\r\n\tshader.vertexShader = `\r\n\t\t\tvarying vec3 wPosition;\r\n\t\t\t${shader.vertexShader}\r\n\t\t`.replace(\r\n\t\t/#include <displacementmap_vertex>/,\r\n\t\tv =>\r\n\t\t\t`${v}\r\n\t\t\t\twPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;\r\n\t\t\t\t`,\r\n\t);\r\n\r\n\tshader.fragmentShader = `\r\n\t\tvarying vec3 wPosition;\r\n\t\t${shader.fragmentShader}\r\n\t\t`;\r\n\r\n\treturn shader;\r\n\r\n}\r\n\r\nexport function csgGridShaderMixin( shader ) {\r\n\r\n\tshader.uniforms = {\r\n\t\t...shader.uniforms,\r\n\t\tcheckerboardColor: { value: new Color( 0x111111 ) }\r\n\t};\r\n\r\n\taddWorldPosition( shader );\r\n\r\n\tshader.defines = { CSG_GRID: 1 };\r\n\r\n\tshader.fragmentShader = shader.fragmentShader.replace(\r\n\t\t/#include <common>/,\r\n\t\tv =>\r\n\t\t/* glsl */`\r\n\t\t\t${v}\r\n\r\n\t\t\tuniform vec3 checkerboardColor;\r\n\t\t\tfloat getCheckerboard( vec2 p, float scale ) {\r\n\r\n\t\t\t\tp /= scale;\r\n\t\t\t\tp += vec2( 0.5 );\r\n\r\n\t\t\t\tvec2 line = mod( p, 2.0 ) - vec2( 1.0 );\r\n\t\t\t\tline = abs( line );\r\n\r\n\t\t\t\tvec2 pWidth = fwidth( line );\r\n\t\t\t\tvec2 value = smoothstep( 0.5 - pWidth / 2.0, 0.5 + pWidth / 2.0, line );\r\n\t\t\t\tfloat result = value.x * value.y + ( 1.0 - value.x ) * ( 1.0 - value.y );\r\n\r\n\t\t\t\treturn result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloat getGrid( vec2 p, float scale, float thickness ) {\r\n\r\n\t\t\t\tp /= 0.5 * scale;\r\n\r\n\t\t\t\tvec2 stride = mod( p, 2.0 ) - vec2( 1.0 );\r\n\t\t\t\tstride = abs( stride );\r\n\r\n\t\t\t\tvec2 pWidth = fwidth( p );\r\n\t\t\t\tvec2 line = smoothstep( 1.0 - pWidth / 2.0, 1.0 + pWidth / 2.0, stride + thickness * pWidth );\r\n\r\n\t\t\t\treturn max( line.x, line.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec3 getFaceColor( vec2 p, vec3 color ) {\r\n\r\n\t\t\t\tfloat checkLarge = getCheckerboard( p, 1.0 );\r\n\t\t\t\tfloat checkSmall = abs( getCheckerboard( p, 0.1 ) );\r\n\t\t\t\tfloat lines = getGrid( p, 10.0, 1.0 );\r\n\r\n\t\t\t\tvec3 checkColor = mix(\r\n\t\t\t\t\tvec3( 0.7 ) * color,\r\n\t\t\t\t\tvec3( 1.0 ) * color,\r\n\t\t\t\t\tcheckSmall * 0.4 + checkLarge * 0.6\r\n\t\t\t\t);\r\n\r\n\t\t\t\tvec3 gridColor = vec3( 1.0 );\r\n\r\n\t\t\t\treturn mix( checkColor, gridColor, lines );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloat angleBetween( vec3 a, vec3 b ) {\r\n\r\n\t\t\t\treturn acos( abs( dot( a, b ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec3 planeProject( vec3 norm, vec3 other ) {\r\n\r\n\t\t\t\tfloat d = dot( norm, other );\r\n\t\t\t\treturn normalize( other - norm * d );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec3 getBlendFactors( vec3 norm ) {\r\n\r\n\t\t\t\tvec3 xVec = vec3( 1.0, 0.0, 0.0 );\r\n\t\t\t\tvec3 yVec = vec3( 0.0, 1.0, 0.0 );\r\n\t\t\t\tvec3 zVec = vec3( 0.0, 0.0, 1.0 );\r\n\r\n\t\t\t\tvec3 projX = planeProject( xVec, norm );\r\n\t\t\t\tvec3 projY = planeProject( yVec, norm );\r\n\t\t\t\tvec3 projZ = planeProject( zVec, norm );\r\n\r\n\t\t\t\tfloat xAngle = max(\r\n\t\t\t\t\tangleBetween( xVec, projY ),\r\n\t\t\t\t\tangleBetween( xVec, projZ )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tfloat yAngle = max(\r\n\t\t\t\t\tangleBetween( yVec, projX ),\r\n\t\t\t\t\tangleBetween( yVec, projZ )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tfloat zAngle = max(\r\n\t\t\t\t\tangleBetween( zVec, projX ),\r\n\t\t\t\t\tangleBetween( zVec, projY )\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn vec3( xAngle, yAngle, zAngle ) / ( 0.5 * PI );\r\n\r\n\t\t\t}\r\n\t\t` ).replace(\r\n\t\t/#include <normal_fragment_maps>/,\r\n\t\tv =>\r\n\t\t/* glsl */`${v}\r\n\t\t\t\t#if CSG_GRID\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\t\t\t\t\tfloat yCont = abs( dot( vec3( 0.0, 1.0, 0.0 ), worldNormal ) );\r\n\t\t\t\t\tfloat zCont = abs( dot( vec3( 0.0, 0.0, 1.0 ), worldNormal ) );\r\n\t\t\t\t\tfloat xCont = abs( dot( vec3( 1.0, 0.0, 0.0 ), worldNormal ) );\r\n\r\n\t\t\t\t\tvec3 factors = getBlendFactors( worldNormal );\r\n\t\t\t\t\tfactors = smoothstep( vec3( 0.475 ), vec3( 0.525 ), vec3( 1.0 ) - factors );\r\n\r\n\t\t\t\t\tfloat weight = factors.x + factors.y + factors.z;\r\n\t\t\t\t\tfactors /= weight;\r\n\r\n\t\t\t\t\tvec3 color =\r\n\t\t\t\t\t\tgetFaceColor( wPosition.yz, diffuseColor.rgb ) * factors.x +\r\n\t\t\t\t\t\tgetFaceColor( wPosition.xz, diffuseColor.rgb ) * factors.y +\r\n\t\t\t\t\t\tgetFaceColor( wPosition.xy, diffuseColor.rgb ) * factors.z;\r\n\r\n\t\t\t\t\tdiffuseColor.rgb = color;\r\n\r\n\t\t\t\t}\r\n\t\t\t\t#endif\r\n\t\t\t\t`,\r\n\t);\r\n\r\n\treturn shader;\r\n\r\n}\r\n","import { MeshPhongMaterial } from 'three';\r\nimport { csgGridShaderMixin } from './shaderUtils.js';\r\n\r\nexport class GridMaterial extends MeshPhongMaterial {\r\n\r\n\tget enableGrid() {\r\n\r\n\t\treturn Boolean( this._enableGrid );\r\n\r\n\t}\r\n\r\n\tset enableGrid( v ) {\r\n\r\n\t\tif ( this._enableGrid !== v ) {\r\n\r\n\t\t\tthis._enableGrid = v;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tthis.enableGrid = true;\r\n\r\n\t}\r\n\r\n\tonBeforeCompile( shader ) {\r\n\r\n\t\tcsgGridShaderMixin( shader );\r\n\t\tshader.defines.CSG_GRID = Number( this.enableGrid );\r\n\r\n\t}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.enableGrid;\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferAttribute, Color, MathUtils } from 'three';\r\n\r\nexport function getTriangleDefinitions( ...triangles ) {\r\n\r\n\tfunction getVectorDefinition( v ) {\r\n\r\n\t\treturn /* js */`new THREE.Vector3( ${ v.x }, ${ v.y }, ${ v.z } )`;\r\n\r\n\t}\r\n\r\n\treturn triangles.map( t => {\r\n\r\n\t\treturn /* js */`\r\n\t\t\tnew THREE.Triangle(\r\n\t\t\t\t${ getVectorDefinition( t.a ) },\r\n\t\t\t\t${ getVectorDefinition( t.b ) },\r\n\t\t\t\t${ getVectorDefinition( t.c ) },\r\n\t\t\t)`.substring( 1 );\r\n\r\n\t} );\r\n\r\n}\r\n\r\nexport function logTriangleDefinitions( ...triangles ) {\r\n\r\n\tconsole.log( getTriangleDefinitions( ...triangles ).join( ',\\n' ) );\r\n\r\n}\r\n\r\nexport function generateRandomTriangleColors( geometry ) {\r\n\r\n\tconst position = geometry.attributes.position;\r\n\tconst array = new Float32Array( position.count * 3 );\r\n\r\n\tconst color = new Color();\r\n\tfor ( let i = 0, l = array.length; i < l; i += 9 ) {\r\n\r\n\t\tcolor.setHSL(\r\n\t\t\tMath.random(),\r\n\t\t\tMathUtils.lerp( 0.5, 1.0, Math.random() ),\r\n\t\t\tMathUtils.lerp( 0.5, 0.75, Math.random() ),\r\n\t\t);\r\n\r\n\t\tarray[ i + 0 ] = color.r;\r\n\t\tarray[ i + 1 ] = color.g;\r\n\t\tarray[ i + 2 ] = color.b;\r\n\r\n\t\tarray[ i + 3 ] = color.r;\r\n\t\tarray[ i + 4 ] = color.g;\r\n\t\tarray[ i + 5 ] = color.b;\r\n\r\n\t\tarray[ i + 6 ] = color.r;\r\n\t\tarray[ i + 7 ] = color.g;\r\n\t\tarray[ i + 8 ] = color.b;\r\n\r\n\t}\r\n\r\n\tgeometry.setAttribute( 'color', new BufferAttribute( array, 3 ) );\r\n\r\n}\r\n","import { Group, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, BufferGeometry, BufferAttribute } from 'three';\r\n\r\nexport class TriangleSetHelper extends Group {\r\n\r\n\tget color() {\r\n\r\n\t\treturn this._mesh.material.color;\r\n\r\n\t}\r\n\r\n\tget side() {\r\n\r\n\t\treturn this._mesh.material.side;\r\n\r\n\t}\r\n\r\n\tset side( v ) {\r\n\r\n\t\tthis._mesh.material.side = v;\r\n\r\n\t}\r\n\r\n\tconstructor( triangles = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tconst lineGeom = new BufferGeometry();\r\n\t\tthis._mesh = new Mesh( geometry, new MeshPhongMaterial( {\r\n\t\t\tflatShading: true,\r\n\t\t\ttransparent: true,\r\n\t\t\topacity: 0.25,\r\n\t\t} ) );\r\n\t\tthis._lines = new LineSegments( lineGeom, new LineBasicMaterial() );\r\n\t\tthis._mesh.material.color = this._lines.material.color;\r\n\r\n\t\tthis._lines.frustumCulled = false;\r\n\t\tthis._mesh.frustumCulled = false;\r\n\r\n\t\tthis.add( this._lines, this._mesh );\r\n\r\n\t\tthis.setTriangles( triangles );\r\n\r\n\t}\r\n\r\n\tsetTriangles( triangles ) {\r\n\r\n\t\tconst triPositions = new Float32Array( 3 * 3 * triangles.length );\r\n\t\tconst linePositions = new Float32Array( 6 * 3 * triangles.length );\r\n\t\tfor ( let i = 0, l = triangles.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst i9 = 9 * i;\r\n\t\t\tconst i18 = 18 * i;\r\n\t\t\tconst tri = triangles[ i ];\r\n\r\n\t\t\ttri.a.toArray( triPositions, i9 + 0 );\r\n\t\t\ttri.b.toArray( triPositions, i9 + 3 );\r\n\t\t\ttri.c.toArray( triPositions, i9 + 6 );\r\n\r\n\r\n\t\t\ttri.a.toArray( linePositions, i18 + 0 );\r\n\t\t\ttri.b.toArray( linePositions, i18 + 3 );\r\n\r\n\t\t\ttri.b.toArray( linePositions, i18 + 6 );\r\n\t\t\ttri.c.toArray( linePositions, i18 + 9 );\r\n\r\n\t\t\ttri.c.toArray( linePositions, i18 + 12 );\r\n\t\t\ttri.a.toArray( linePositions, i18 + 15 );\r\n\r\n\t\t}\r\n\r\n\t\tthis._mesh.geometry.dispose();\r\n\t\tthis._mesh.geometry.setAttribute( 'position', new BufferAttribute( triPositions, 3 ) );\r\n\r\n\t\tthis._lines.geometry.dispose();\r\n\t\tthis._lines.geometry.setAttribute( 'position', new BufferAttribute( linePositions, 3 ) );\r\n\r\n\t}\r\n\r\n}\r\n","import { LineSegments } from 'three';\r\n\r\nexport class EdgesHelper extends LineSegments {\r\n\r\n\tget color() {\r\n\r\n\t\treturn this.material.color;\r\n\r\n\t}\r\n\r\n\tconstructor( edges = [] ) {\r\n\r\n\t\tsuper();\r\n\t\tthis.frustumCulled = false;\r\n\t\tthis.setEdges( edges );\r\n\r\n\t}\r\n\r\n\tsetEdges( edges ) {\r\n\r\n\t\tconst { geometry } = this;\r\n\t\tconst points = edges.flatMap( e => [ e.start, e.end ] );\r\n\t\tgeometry.dispose();\r\n\t\tgeometry.setFromPoints( points );\r\n\r\n\t}\r\n\r\n}\r\n","import { InstancedMesh, SphereBufferGeometry, MeshBasicMaterial, Matrix4 } from 'three';\r\n\r\nconst _matrix = new Matrix4();\r\nexport class PointsHelper extends InstancedMesh {\r\n\r\n\tget color() {\r\n\r\n\t\treturn this.material.color;\r\n\r\n\t}\r\n\r\n\tconstructor( count = 1000, points = [] ) {\r\n\r\n\t\tsuper( new SphereBufferGeometry( 0.025 ), new MeshBasicMaterial(), count );\r\n\t\tthis.frustumCulled = false;\r\n\t\tthis.setPoints( points );\r\n\r\n\t}\r\n\r\n\tsetPoints( points ) {\r\n\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = points[ i ];\r\n\t\t\t_matrix.makeTranslation( point.x, point.y, point.z );\r\n\t\t\tthis.setMatrixAt( i, _matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.count = points.length;\r\n\r\n\t}\r\n\r\n}\r\n","import { Line3, Triangle, Vector3, Plane } from 'three';\r\nimport { EdgesHelper } from './EdgesHelper.js';\r\n\r\nconst _tri1 = new Triangle();\r\nconst _tri2 = new Triangle();\r\nconst _center = new Vector3();\r\nconst _center2 = new Vector3();\r\nconst _edgeCenter = new Vector3();\r\nconst _edgeCenter2 = new Vector3();\r\nconst _projected = new Vector3();\r\nconst _projected2 = new Vector3();\r\nconst _projectedDir = new Vector3();\r\nconst _projectedDir2 = new Vector3();\r\nconst _edgeDir = new Vector3();\r\nconst _edgeDir2 = new Vector3();\r\nconst _vec = new Vector3();\r\nconst _vec2 = new Vector3();\r\nconst _finalPoint = new Vector3();\r\nconst _finalPoint2 = new Vector3();\r\nconst _plane = new Plane();\r\nconst _plane2 = new Plane();\r\n\r\nfunction getTriangle( geometry, triIndex, target ) {\r\n\r\n\tconst i3 = 3 * triIndex;\r\n\tlet i0 = i3 + 0;\r\n\tlet i1 = i3 + 1;\r\n\tlet i2 = i3 + 2;\r\n\r\n\tconst indexAttr = geometry.index;\r\n\tconst posAttr = geometry.attributes.position;\r\n\tif ( indexAttr ) {\r\n\r\n\t\ti0 = indexAttr.getX( i0 );\r\n\t\ti1 = indexAttr.getX( i1 );\r\n\t\ti2 = indexAttr.getX( i2 );\r\n\r\n\t}\r\n\r\n\ttarget.a.fromBufferAttribute( posAttr, i0 );\r\n\ttarget.b.fromBufferAttribute( posAttr, i1 );\r\n\ttarget.c.fromBufferAttribute( posAttr, i2 );\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nexport class HalfEdgeHelper extends EdgesHelper {\r\n\r\n\tconstructor( geometry = null, halfEdges = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tif ( geometry && halfEdges ) {\r\n\r\n\t\t\tthis.setHalfEdges( geometry, halfEdges );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetHalfEdges( geometry, halfEdges ) {\r\n\r\n\t\tconst indexAttr = geometry.index;\r\n\t\tconst posAttr = geometry.attributes.position;\r\n\r\n\t\tconst vertKeys = [ 'a', 'b', 'c' ];\r\n\t\tconst edges = [];\r\n\t\tconst triCount = indexAttr ? indexAttr.count / 3 : posAttr.count / 3;\r\n\t\tfor ( let triIndex = 0; triIndex < triCount; triIndex ++ ) {\r\n\r\n\t\t\tgetTriangle( geometry, triIndex, _tri1 );\r\n\t\t\t_tri1.getMidpoint( _center );\r\n\t\t\t_tri1.getPlane( _plane );\r\n\t\t\tfor ( let e = 0; e < 3; e ++ ) {\r\n\r\n\t\t\t\tconst otherTriIndex = halfEdges.getSiblingTriangleIndex( triIndex, e );\r\n\t\t\t\tconst otherEdgeIndex = halfEdges.getSiblingEdgeIndex( triIndex, e );\r\n\t\t\t\tif ( otherTriIndex === - 1 ) {\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// get other triangle\r\n\t\t\t\tgetTriangle( geometry, otherTriIndex, _tri2 );\r\n\t\t\t\t_tri2.getPlane( _plane2 );\r\n\r\n\t\t\t\t// get triangle center\r\n\t\t\t\t_tri2.getMidpoint( _center2 );\r\n\r\n\t\t\t\t// get edge centers\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tconst nextE = ( e + 1 ) % 3;\r\n\t\t\t\t\tconst v0 = _tri1[ vertKeys[ e ] ];\r\n\t\t\t\t\tconst v1 = _tri1[ vertKeys[ nextE ] ];\r\n\t\t\t\t\t_edgeCenter.lerpVectors( v0, v1, 0.5 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tconst nextE = ( otherEdgeIndex + 1 ) % 3;\r\n\t\t\t\t\tconst v0 = _tri2[ vertKeys[ otherEdgeIndex ] ];\r\n\t\t\t\t\tconst v1 = _tri2[ vertKeys[ nextE ] ];\r\n\t\t\t\t\t_edgeCenter2.lerpVectors( v0, v1, 0.5 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// get the projected centers\r\n\t\t\t\t_plane.projectPoint( _center2, _projected );\r\n\t\t\t\t_plane2.projectPoint( _center, _projected2 );\r\n\r\n\t\t\t\t// get the directions so we can flip them if needed\r\n\t\t\t\t_projectedDir.subVectors( _projected, _center );\r\n\t\t\t\t_projectedDir2.subVectors( _projected2, _center2 );\r\n\r\n\t\t\t\t// get the directions so we can flip them if needed\r\n\t\t\t\t_edgeDir.subVectors( _edgeCenter, _center );\r\n\t\t\t\t_edgeDir2.subVectors( _edgeCenter2, _center2 );\r\n\r\n\t\t\t\tif ( _projectedDir.dot( _edgeDir ) < 0 ) {\r\n\r\n\t\t\t\t\t_projectedDir.multiplyScalar( - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _projectedDir2.dot( _edgeDir2 ) < 0 ) {\r\n\r\n\t\t\t\t\t_projectedDir2.multiplyScalar( - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// find the new points after inversion\r\n\t\t\t\t_vec.addVectors( _center, _projectedDir );\r\n\t\t\t\t_vec2.addVectors( _center2, _projectedDir2 );\r\n\r\n\t\t\t\t// project the points onto the triangle edge. This would be better\r\n\t\t\t\t// if we clipped instead of chose the closest point\r\n\t\t\t\t_tri1.closestPointToPoint( _vec, _finalPoint );\r\n\t\t\t\t_tri2.closestPointToPoint( _vec2, _finalPoint2 );\r\n\r\n\t\t\t\tconst edge = new Line3();\r\n\t\t\t\tedge.start.copy( _center );\r\n\t\t\t\tedge.end.lerpVectors( _finalPoint, _finalPoint2, 0.5 );\r\n\t\t\t\tedges.push( edge );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.setEdges( edges );\r\n\r\n\t}\r\n\r\n}\r\n"],"names":["_matrix","_tri","_edge","_vec","_plane"],"mappings":"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"}